You can use the DTDCachingEntityResolver to cache responses:

resolver := DTDCachingEntityResolver new.

then:

(XMLDOMParser onFileNamed: 'lion.svg')
externalEntityResolver: resolver;
parseDocument.

or you could just disable validation and external entity resolution altogether:
(XMLDOMParser onFileNamed: 'lion.svg')
isValidating: false;
resolvesExternalEntities: false;
parseDocument.

if you're parsing a string or stream (and you can always create your own file stream and give it that), you can do everything with just one message:

XMLDOMParser
parse: xmlStringOrStream
usingNamespaces: true;
validation: false;
externalEntities: false.

This is all in the documentation for SAXHandler.


With Zinc patched using the fileOut attached (which I emailed to Sven) and the latest XMLParser packages, Satoshi's code works fine. But it takes a while to make the 12 (!) HTTP requests needed for the external DTD and external entities it includes. It is good to use the caching resolver for this sort of thing:




resolver := DTDCachingEntityResolver new.
xml := '<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE score-partwise PUBLIC
    "-//Recordare//DTD MusicXML 3.0 Partwise//EN"
    "http://www.musicxml.org/dtds/partwise.dtd">
<score-partwise version="3.0">
  <part-list>
    <score-part id="P1">
      <part-name>Music</part-name>
    </score-part>
  </part-list>
  <part id="P1">
    <measure number="1">
      <attributes>
        <divisions>1</divisions>
        <key>
          <fifths>0</fifths>
        </key>
        <time>
          <beats>4</beats>
          <beat-type>4</beat-type>
        </time>
        <clef>
          <sign>G</sign>
          <line>2</line>
        </clef>
      </attributes>
      <note>
        <pitch>
          <step>C</step>
          <octave>4</octave>
        </pitch>
        <duration>4</duration>
        <type>whole</type>
      </note>
    </measure>
  </part>
</score-partwise>
'.
(XMLDOMParser on: xml)
    externalEntityResolver: resolver;
    parseDocument.
