! BioPharo

''Author: Hernán Morales Durand <hernan.morales@gmail.com>''

!!Introduction

BioSmalltalk is a library for doing bioinformatics with the Smalltalk programming system. BioPharo is the Pharo implementation of BioSmalltalk library. This guide's goal is to be useful for bioinformaticians, biologists, or life scientists, with little or no experience at all in programming or object technology. It will explain everything needed to understand how to use BioPharo to reach your objectives, also contains the specific context and vocabulary to communicate properly in mailing lists when you need help. Object-Oriented Programming concepts are not required for basic tasks (like building sequences, parsing files, and exploring results) but are specially necessary to build more complex objects and/or debugging code, for example.

BioPharo is distributed in several forms depending of the platform:

-For Microsoft Windows as an installer.
-For Mac/OS X as a compressed ZIP file.
-For GNU/Linux as a compressed .tgz file.

All distributions contains:

-A virtual image file (.image extension)
-A changes file (.changes extension)
-The Smalltalk Virtual Machine (VM) (executable file)
-A group of folders including test data.

The usual way to run BioPharo is to open the "Environment", a run-time Integrated Developement Environment. It is however possible to execute scripts from .st files (explained in the Executing Scripts section) however you would miss powerful tools like Browsers, Refactoring Tools, Code Critics, Finders, etc.

!!Mailing lists 

A mailing list for users is available as ""*biosmalltalk-users>http://groups.google.com/group/biosmalltalk-users*"". A mailing list for developers is available as ""*biosmalltalk-developers>http://groups.google.com/group/biosmalltalk-developers*"". Beware that posts are (or will be) publicly available trhough popular search engines and mailing lists archives. If you want to create another list for a particular package or subsystem, contact the project manager through the project page.

!!Sequences

A biological sequence is a single, continuous molecule of nucleic acid or protein, and represents a naturally occurring or experimental generated fragment of genetic or protein material or any intermediate product (like the messenger RNA). It is possibly the most important object in bioinformatics and most bioinformatics workflows involve sequences at some point. In BioSmalltalk sequences are represented with BioSequence object. A sequence is essentialy a String object with an alphabet. It is read-only, if you want to modify a sequence in place you may use BioMutableSeq. 

You may evaluate the following scripts in BioPharo by selecting the code, right button, and choose one of the following operations:

-""Print it"" (""Show it"", or ""Display it""): To print the results as a simple String next to the selected code.
-""Inspect it"": To open an Inspector window. You may observe and send messages over the selected object in the left pane
-""Explore it"": To open an Explorer window. You may expand the tree items, and send messages over the selected object. 

[[[label=script1|caption=Creating a DNA sequence
BioSequence newDNA: 'atcggtcggctta'.
]]]

The above one-liner creates a "BioSequence instance". Nucleotide letters are case-insensitive, this is, meaning does not change based on differing use of uppercase and lowercase letters. When the alphabet information of a sequence string is missing (as in this case, or when reading sequences from FASTA files), BioSequence will try to guess the alphabet type. Notice ""it is"" possible to create a sequence specifying the alphabet, for example

[[[label=script2|caption=Creating a DNA sequence with an alphabet
BioSequence newAmbiguousDNA:'AAGTCAGTGTACTATTAGCATGCATGTGCAACACATTAGCTG'.
BioSequence newUnambiguousDNA:'AAGTCAGTGTACTATTAGCATGCATGTGCAACACATTAGCTG'.
]]]

Also it is possible to create a sequence without specifying the BioSequence class, converting a String into a Sequence object. The following expressions display the contents of the #asSequence message. 

[[[label=script3|caption=Creating a DNA sequence
'ATGCTAGT' asSequence.
]]]

Similarily, to create a RNA and Protein sequence, you may use

[[[
BioSequence newRNA: 'auugccuacauaggc'.
BioSequence newProtein: 'AGFAVENDSA'.
]]]

!!Alphabets

!!!IUPAC

IUPAC is one of the many non-governmental organizations composing the International Council for Science. In practice, for the bioinformatician, serves as a "standard" for the naming of the chemical elements and compounds.

Amongst other nomenclatures, in bioinformatics the ''IUPAC codes'' usually identify amino acids and nucleotide bases. These codes can consist of either one letter code or a three letter code. For example DNA letters are A, G, C, T bases, which compose the DNA Alphabet. Alphabets are used to determine the contents of a sequence, because simple String(s) are not enough. Consider the following sequence: 

[[[
'GTCG'
]]]

it could be interpreted as:

-A DNA fragment of Guanine,Thymine,Cytosine and Guanine.
-A Peptide with Glycine, Threonine, Cysteine and Glycine. 

the solution is to disambiguate specifying the correct Alphabet objects when appropriate. 

Alphabets classes are located under the BioAlphabet class hierarchy. To access the ambiguous alphabets just ask to the IUPAC albhabet abstract class: 

[[[
BioIUPACAlphabet ambiguousAlphabets. --> an OrderedCollection(BioIUPACAmbiguousRNA BioIUPACAmbiguousDNA)
]]]

The following script displays the alphabet letters available in the IUPAC specific classes:

[[[label=script3|caption=Alphabet letters for IUPAC codes
BioIUPACAmbiguousDNA codes --> ACGTWSMKRYBDHVN
BioIUPACAmbiguousRNA codes --> GAUCRYWSMKHBVDN
BioIUPACAmbiguousDNA ambiguityCodes --> WSMKRYBDHVN
BioIUPACAmbiguousRNA ambiguityCodes --> RYWSMKHBVDN
BioIUPACUnambiguousDNA codes --> GATCN
BioIUPACUnambiguousRNA codes --> GAUC
BioIUPACDNAExtended codes --> GATCBDSW
BioIUPACProtein codes --> ACDEFGHIKLMNPQRSTVWY
BioIUPACProteinExtended codes --> ACDEFGHIKLMNPQRSTVWYBXZJUO
BioNullAlphabet codes --> -
]]]

Notice however the IUPAC encoding lacks of symbols for termination, gap (`-`), or selenocysteine.

!! Parsing

!!! About parsing

Parsing is one of the most important parts of developing software in bioinformatics. Parsing is a process by which a developer makes sense of a sentence, usually by breaking it down into letters or words. A parser is an object that scans an input String, decomposes it into its constituent parts (which you may define), and then optionally processes the parts in some suitable manner. Texts usually refer to writing a parser ''by hand'' when you write a parser without any support programming library, so developers use a “parser generator” and write rules for this generator. Why? Because keeping track of contingencies caused by different inputs and input paths is extremelly difficult, and a generated parser code can be proved mathematically. 

!!! Parsing in BioPharo

BioSmalltalk uses different libraries to enable parsing of the many formats out there in the bioinformatics field.

-XMLSupport for parsing in DOM or SAX mode
-XMLPullParser for StAX parsing
-PetitParser for parsing formatted or structured text. 

!!! Parsing Sequences

For example, finding if a given String like 'TCGTACGA' is actually a DNA sequence you just evaluate:
[[[
#dnaSequence asParser matches: 'TCGTACGA'.  --> true
#dnaSequence asParser matches: 'TCGTZZZACGA'.  --> false
]]]
and for parsing:
[[[
#dnaSequence asParser parse: 'TCGTACGA'. --> 'TCGTACGA'
#dnaSequence asParser parse: 'TCGTA3344CGA'. --> end of input expected at 5
]]]

Another common way to use the existing parsers is through the ""BioParser class"". In BioSmalltalk we have two modes of parsing: Tokenize and Parse. The tokenize messages always answer a Collection-like object containing other collections or primitive Smalltalk objects (this is, something like #('object1' 'object2') or 1234, 74.32, true, etc.), while the parse messages answer BioObject's. 
You may want BioObjects if you need to keep working with the resulting bio-objects from your parsing. Or to learn relationships between BioObjects. You may work with primitive Smalltalk objects like Integers or Strings if you want "cheap" objects.

!!! Parsing Accession Numbers

An accession number is a unique sequential number assigned to each record (sequence) in a repository. This number allows for tracking of different versions of a sequence record and the associated sequence over time. Parsing an accession number answers a very simple object which you may use to store or index separatedly from its sequence, thus, reducing storage space and processing time. To parse an accession number:

[[[
BioParser parseAccession: 'CAF97855.1' -->  a BioAccession CAF97855 1
]]]
you may query if its versioned
[[[
(BioParser parseAccession: 'CAF97855.1') isVersioned --> true
]]]
and query the version number
[[[
(BioParser parseAccession: 'CAF97855.1') version --> '1'
]]]
another shortcut for the same message is #asAccession
[[[
'XP_425521.2' asAccession version --> '2'
]]]

!!! Parsing FASTA files

This is how to parse a FASTA file with multiple sequences:

[[[
BioParser parseMultiFasta: (BioFASTAFile on: 'my_sequences.fasta') contents.
]]]

!! Alignments

Underlying sequences are in a BioAlignment are sequence based (contrary to String based). This could enable to access track information like quality score through the alignment itself, instead of maintaining multiple associated matrices. 

[[[label=script3|caption=Creating a Multiple Sequence Alignment
	align := BioAlignment new.
	align 
		addSequence: 'ACTGCTAGCTAG';
		addSequence: 'ACT-CTAGCTAG';
		addSequence: 'ACTGCTAGATAG';
		addSequence: 'ACTGCTTGCTAG';
		addSequence: 'ACTGCTTGATAG'.		
]]]

!! BLAST

Provided by the National Center for Biotechnology Information (NCBI), BLAST is a sequence homology search program that finds all the sequences that match a particular given sequence from a database. The NCBI-GenBank database contains over 150 billion nucleotide bases as of June 2013, and doubling its contents approximately every 18 months. It is considered the most fundamental tool in bioinformatics today, although there are many other similar programs for different cases. In BioPharo you may query programmatically a BLAST at NCBI with the following parameters:

-Query the nucleotide (nr) database.
-Use an "unknown" DNA sequence.
-Get only the first 200 hits.
-Filter query sequence with low compositional complexity.
-Use the default expect value (10).
-Use the BLASTN programs to search nucleotide databases using a nucleotide query.
-Get the results in XML for further querying

which is translated in BioPharo as:

[[[label=script4|caption=Make a BLAST from BioPharo
| search |
search := BioNCBIWebBlastWrapper new nucleotide
		query: 'TCGAAATAACGCGTGTTCTCAACGCGGTCGCGCAGATGCCTTTGCTCATC
AGATGCGACCGCAACCACGTCCGCCGCCTTGTTCGCCGTCCCCGTGCCTC
AACCACCACCACGGTGTCGTCTTCCCCGAACGCGTCCCGGTCAGCCAGCC
TCCACGCGCCGCGCGCGCGGAGTGCCCATTCGGGCCGCAGCTGCGACGGT
GCCGCTCAGATTCTGTGTGGCAGGCGCGTGTTGGAGTCTAAA';
		hitListSize: 200;
		filterLowComplexity;
		expectValue: 10;
		blastn;
		formatTypeXML;
		fetch.
]]]

now the "search" object contains a BioWebBlastResult. The following line write the XML contents to a timestamped file in the directory where the .image file is located:

[[[
search outputToFile: 'blast-' , BioObject currentSeconds , '.xml'.		
]]]

''Note: When the Transcript is opened (Tools --> Transcript) you may view a detailed log of message sends.''

!!Reading and Writing Sequences
!!Entrez
!!Swiss-Prot and ExPASy
!!PDB
!!Population Genetics
!!Phylogenetics
!!Clustering
!!Graphics
!!Cookbook

!! Code Organization

!!! User Code Organization

At this point, you probably have your own scripts and wonder where is the source code maintained. You have several choices, depending on what is your task on course:

-The Script Manager
-The Nautilus Bio Browser

!!! BioSmalltalk Code Organization

Packages are organized in the following way:

;BioBlast
:Desktop and web wrappers, filter and reader classes for Blast results and software
;BioClassifier
:A basic rule engine system and feature classifier
;BioEntrez
:Access to the Entrez Utilities API
;BioFormatters
:Basically file format writers. Naming strategies and other utilities also included here
;BioTools
:Core subsystems which includes basic features
;BioToolsSamples
:Samples could be methods returning String's for other subsstems or Scripts writing output to files
;BioSupport
:Classes and methods working in all Smalltalk platforms
;BioPharo
:Code specific for the Pharo platform
;BioSqueak
:Code specific for the Squeak platform
;BioNCBI
:Code to access NCBI's QBLAST service and convenience utilities.
;BioParsers
:Contains all the parsers. Patches for specific platforms are in their respective packages.
;BioPopulation
:Classes and methods for working with population genetics.
;BioProject
:A basic application framework for organizing work in projects.
;BioWrappers
:Core for wrapping desktop and web programs + specific wrappers for common bioinformatics software.
