!Reef: Reconciling Javascript and Seaside

Reef is a framework to build dynamic components embedding Javascript developed by E. Lorenzano. Reef is a complement to Seaside. Reef does not replace Seaside, instead, it makes easier the definition and use of AJAX/Javascript. Reef makes the writing of Ajax interaction much simpler since as a developer there is no need to manipulate Javascript using queries and string concatenation. Reef also integrates smoothly with JS libraries such bootstrapp.

A reef component can be embedded inside a Seaside one: we call Reef entities components for this reason.  A Seaside component can also be embedded inside a Reef one. 

In this document, we propose you a journey with Reef to show you its power. We will start doing a simple counter application. Then we will take the todo applications and build a user interface using Reef. Then we are going to create a dynamic search of classes, to show basic AJAX interaction, then show some reef widgets. 


!!Installation

To get started with download the latest Seaside image that you can find on *http://www.seaside.st* then execute the following expression:


[[[{Loading Reef}
Gofer it
	url: 'http://smalltalkhub.com/mc/estebanlm/Reef/main';
	package: 'ConfigurationOfReef';
	load.

"Use  this if you already have Seaside30 and JQueryWidgetBox installed"
(ConfigurationOfReef project version: #stable) load. 

"This loads everything, including Seaside30 and JQueryWidgetBox"
(ConfigurationOfReef project version: #stable) load: 'All'. 
]]]



!!A Reef Counter

Let us start to code a simple counter as a reef computer.


[[[
WAComponent subclass: #CounterApplication
    instanceVariableNames: 'count'
    classVariableNames: ''
    poolDictionaries: ''
    category: 'CounterApplication'
]]]

Then we define an ==initialize== method

[[[
CounterApplication>>initialize 
    super initialize.
    count := 0
]]]

!!! A first version with a little problem.
We create a panel to which we add a view on the counter, and two anchors. 
Note that we use a block ==[count asReefView]== so that when the panel is refreshed the current value is used. 
asReefView is a shortcut to create the corresponding default view component. For a number we just convert into the corresponding text view, a REText (as you can see browsing implementors of ==asReefView==). 

Blocks are the way we link client and server behavior.
Each anchor gets a label and a callback. Unless specified differently, the callbacks are executed as 
Ajax callbacks (no new page is rendered but there is a request to the server). 

[[[
CounterApplication>>renderContentOn1: html
    | panel |
    "This has one problem: it refreshes all (including anchors)"
    html render: ((panel := REPanel new)
        class: 'counter';
        add: [ count asReefView ];
        add: (REAnchor new 
            label: '+';
            callback: [ 
                count := count + 1. 
                panel refresh  ];
            yourself);
        add: (REAnchor new 
            label: '-';
            callback: [ 
                count := count - 1. 
                panel refresh ];
            yourself);
        yourself)
]]]

Then we register the application
[[[
REApplication
	registerAsApplication: 'reef-counter'
		roots: CounterApplication
]]]

Now you should get the following in your web-browser

+A Seaside Counter based on Reef>file://figures/ReefCounter.png|width=50|label=review+ 


!!! A second version with controlled refresh.
In the previous definition, the anchors were unnecessary refreshed. Indeed the complete panel containing all the three elements was refreshed. A panel is the unit of refresh in HTML so we enclose what we want to refresh via ajax.

Here we use a container, i.e. a component refreshing only its children and not itself. Then the anchor callbacks will refresh the panel containing the value.

[[[
CounterApplication>>renderContentOn: html
    | panel |    
    panel := REPanel with: [ count asReefView ].
    html render: (REContainer new 
        class: 'counter';
        add: panel ;
        add: (REAnchor new 
            label: '+';
            callback: [ 
                count := count + 1. 
                panel refresh  ];
            yourself);
        add: (REAnchor new 
            label: '-';
            callback: [ 
                count := count - 1. 
                panel refresh ];
            yourself);
        yourself)
]]]

Now to get a better look we can use the Reef library as follows: 

[[[
CounterApplication class>>register 
    "self register"
    (REApplication 
        registerAsApplication: 'reef-counter' 
        root: self)
        addLibrary: REBootstrapLibrary
]]]


!!! Refining the heading.


[[[
CounterApplication>>renderContentOn: html
    | panel |
    
    panel := REPanel with: [ REHeading with: count ].
    
    html render: (REContainer new 
        add: panel;
        add: (REAnchor new 
            class: 'btn';
            label: '+';
            callback: [ 
                count := count + 1. 
                panel refresh  ];
            yourself);
        add: (REAnchor new 
            class: 'btn';
            label: '-';
            callback: [ 
                count := count - 1. 
                panel refresh ];
            yourself);
        yourself)
]]]


+A better Seaside Counter based on Reef>file://figures/moreBeautifulReefCounter|width=50|label=betterreview+ 


So far the counter example does not really show the power of Reef in action.


!!Todo Application


Here a todo :)





!!Creating a Search Component
We will create a Reef component and embed it inside a Seaside one. 


!!!A Simple Reef Component Form

To create a form in Reef, you need to subclass from class ==REForm==. ==REForm== is the class responsible for creating forms in Reef. 


[[[
REForm subclass: #RTSearchPart
	...

]]]

  ==REForm== is a subclass of ==REContainer== which is the root of the components that can have children. Other reef container components are ==REPanel==, ==REGrid==, and ==REList==. Of course such components can be further specialised: hence ==REPanel== is the superclass of ==REDialog==, ==REAccordion==, ==RECarousel==, and ==RETabs==. All these components can then contain other components as shown in Figure~\ref{review}. 

+The ==REView== hierarchy: ==REContainer== is the root of the component container components.>file://figures/REViewHierarchy|width=50|label=hierarchy+ 


Now let us go back to our ==RTSearchPart== class. You need to override the method ==initializeContents== to add children components to your container widget. We use the message ==add:== to add subcomponents. 

[[[
RTSearchPart>>initializeContents
	self add: 'Search'.
	self add: RETextField new.
]]]

\sd{should avoid to harcode class name}

And this is it for our first 'part component' (we usually call reef components \emph{parts}, as a convention to make explicit the fact that a Reef component is often just a part of a Seaside component.


!!!A Host Seaside Component}
Now to see our creation in action we will define a simple traditional Seaside component.

[[[
WAComponent subclass: #RTWebApplication
	instanceVariableNames: 'searchComponent'
	...
]]]

\sd{the name sucks!}

[[[
RTWebApplication>>initialize
	super initialize.
	searchComponent := RTSearchPart new asComponent.
]]]

Since the part will be a children of the application, we should return it as part of the children protocol. 

[[[
RTWebApplication>>children
	^ Array with: searchComponent
]]]

Finally we just render the part and do nothing special. 

[[[
RTWebApplication>>renderContentOn: html
	html render: searchComponent
]]]

As you may have noticed, search component is not just holding an instance of ==RTSearchPart==. Indeed we send the ==asComponent== to this instance before assigning it to the instance variable. And indeed a part of the magic here is this ==asComponent== message send. This message says to any Reef component to be wrapped into a Seaside component. This component can now be added to your Seaside application as any other component.

!!!Registering. As any Seaside application we should register it. Execute in a workspace or define as class ==initialize== method the following expression and execute it. 

[[[
REApplication 
	registerAsApplication: 'simpleTutorial'
	root: RTWebApplication
]]]


You may wonder why we should register our application as a Reef application and not as a simple Seaside application. This is because
Reef supports client side updates and other cool feature that we will present later. 
In addition, a Reef application needs to be configured with some elements: 1) we need some jQuery libraries 2) We need a div tag always present in our browser (a ''dispatcher area'' to process AJAX requests) ==REApplication class>>registerAsApplication:root:== does that for you, but you could do this by yourself and use the common application registering mechanism.



!!!First version.

So, executing your application in *http://localhost:8080/simpleTutorial*, we get the result shown in Figure *first*:

+A simple component (version 1).>file://figures/SearchPartV1|width=50|label=v1+ 

Ok, no so great at the moment, but we are going to add more functionalities.
Right now, our Reef component doesn't do anything (just render a form with a text field), but this is 
just the first step, now we are going to add behavior to our text field widget.

+A simple component (version 2).>file://figures/SearchPartV2|width=50|label=v2+ 



[[[
RTSearchPart>>initializeContents
	self add: 'Search'.
	self add: (RETextField new
		onKeyPressed: [:me | me triggerThenDo: [self inform: text] ];
		callback: [:v | text := v]
]]]

\sd{what is text? a new instance variable in SearchPart}

Changes introduced: 
- We added a ==callback:== message. The ==callback:== message looks like a standard seaside brush and in fact is the same.
- We added an ==onKeyPress:== message. This is different from Seaside. In plain Seaside,
you need to send a Javascript string to this kind of messages (tag events). 
In Reef, that's not what you do. Instead, you use a block with Smalltalk code (at least in most cases). 
In this case, the ==onKeyPress:== block is getting the text field as a parameter (it is optional), and we are saying: trigger this widget and then execute another action.
\sd{wht is trigger this widget means?}


Let's test it! When you enter a character you should get the inform as shown in Figure *v2*.

!!!Adding a feedback panel.

Now we want to add a panel to show the classes whose name matches the input. 
For this we are going to modify our ==RESearchPart== class again. We add a new instance 
variable named ==resultsPanel== that will display all the matching results.

[[[
REForm subclass: #RTSearchPart
	instanceVariableNames: 'text resultsPanel'
	...
]]]



[[[
RESearchPart>>initializeContents
	resultsPanel := REPanel new.
	self add: 'Search'.
	self add: (RETextField new
		onKeyPress: [:me | me triggerThenDo: [self search] ];
		callback: [:v | text := v]).
	self add: resultsPanel
]]]



[[[
RESearchPart>>search
	resultsPanel removeAll.
	text ifNotEmpty: [ 
		resultsPanel
			addAll: (Smalltalk classNames
					select: [:each | each beginsWith: text]
					thenCollect: [ :each | 
							REPanel new 
								add: each ; yourself ]);
			refresh ]
]]]

This one is better
[[[
RESearchPart>>search
	resultsPanel removeAll.
	text ifNotEmpty: [
		resultsPanel
			addAll: (Smalltalk classNames select: [:each | each beginsWith: text]);
			refresh ]
]]]


\sd{I do not see why we are adding a new panel? because we removeall the items
so we could just add the items inside}

What changes did we introduce?
- we added a panel instance variable (==resultPanel==) 
- then, we modified ==onKeyPress:== to call ==search== instead of showing a dialog. 
- The ==search== method does a refresh of the panel by doing:
-- remove all children (if any) 
-- add all class names with a name starting with ''text'', as a new panel (we need a panel because we want a name per line...) 
-- send a ==refresh== message, which actually performs the refresh of the panel content. 


Once you refreshed your application, you should see Figure *v3*.

+With the matching list of classes as feedback (version 3).>file://figures/SearchPartV3|width=50|label=v3+ 


So we are done with your first Reef component. What you should notice is that we did not talk about JavaScript since it is encapsulated in Reef components. 



!!Dealing with Callbacks
One of the strengths of Reef is that we can control the interaction between the client and the server. 

!!!Client-Server interaction in Reef

One of the most important features in Seaside is it's natural flow, achieved through the use of closures under the forms of callbacks. One of the problems on using a client-side library, such as ==jQuery== or any JavaScript library, is the loose of this natural feeling.

In Reef, we try to keep this natural flow, as much as we can, by hiding most of the JavaScript complexity, and using smalltalk closures also for JavaScript behavior.  For that, we have redefined the event behavior to match a little more with what a Smalltalk programmer can expect. Let us see the different kind of interactions.



!!!Three different kind of interactions

There are three kinds of  possible interactions between a page in a client and the Seaside server:

- The client application needs to access the server to do something, and then update the status of the page, but without rendering a new page because it can be too costly. As we think this kind of interaction is the hardest to manage, and the most commonly used, this is the default Reef behavior.
- The client application needs to call server with some functionality, and then it renders a new page. This is the ''normal behavior'' of a web application, and in Reef we support it as a way to ''get back'' to normal flow, while inside a Reef flow.
- The page needs to change the DOM (for instance, to hover current selected row), without going to server at all. This is, for us, the most difficult to solve, because the DOM manipulation needs to be a JavaScript sentence.


These three different interactions are defining the ways an application can interact with the user, creating different results, but just one final feeling: we are in a ''desktop'' application.
We are going to explain how Reef manages these three approaches.

!!!Updating the server, then update the client
As we said before, we think this is the most common behavior you can find in a web-application, and for that reason we are focusing in this mode. How does it work?
Well, let's suppose you have a validation in a text field that needs to be validated on blur event (once you lost focus), you have something like this:

[[[
	...
	self add: (RETextField new
				onBlur: [ :me | me triggerThenDo: 
							[ self validate ifFalse: [ self error: 'Error validating' ] ] ]; 
				on: #value of: self)
	...
]]]

As you can see, the flow is more or less like it would be in any usual Smalltalk application, with just one  difference: you need to tell the client that you are going to use the value just typed in this field, \sd{is it validate?} and just then we can for real interact with the client side value. Using this kind of callback is the default behavior in any Reef component, with the unique exception of the argument of ==callback:== in form elements (those who will become in a FORM element in HTML, like an INPUT, TEXTAREA, etc.).

\sd{totally unclear to me }


!!!Update the server, then render a new page

This functionality is useful after pressing a button, or after doing some operations that we decide needs a new page. What it does is to skip the client/server AJAX interaction and render a full new page: it works just like a common anchor or button press in plain HTML. To tell Reef that the result of a callback should be executed in another page, we use the protocol ==asReefPageCallback==. See next example:

[[[
	... 
	add: (REButton new
			label: 'Login'; 
			callback: [ self login ] asReefPageCallback)
	...
]]]

In this case, pressing the button acts just like pressing a regular button in Seaside.

\sd{ (well... not exactly equal, but act like that in almost any case). either we explain it or we remove it}

!!!Not updating the server, just the client

This third case is useful to perform client side validations, or highlighting something on hover. This callback executes its contents at render time, and prepare the page with the resulting JavaScript, so it can act on client side. To tell Reef that it should execute the callback on client side, we use the protocol: ==asReefClientCallback==. See the example:

\sd{we should put the complete code}

[[[
	... 
	self add: (REPanel new
		class: 'panel'; 
		onMouseMove: [ :me | me asClient addClass: 'hover' ] asReefClientCallback; 
		onMouseOut: [ :me | me asClient removeClass: 'hover' ] asReefClientCallback; 
		add: 'Panel with hover'; yourself).
	...
]]]

As you can see, we introduced the protocol ==asReefClientCallback==, which answers a representation in JavaScript, and you can then send messages of the jQuery package.
\sd{where? I only saw asReefClientCallback no asClient}



!!!Hybrids

There is still one scenario to deal with: The one in which we want to do something and in some cases the opposite. For example, if we want to validate some inputs and on success render a new page, but on failure stay in the current page, and show a message. 

To allow us execute different client/server interactions inside a flow, there are the protocols: ==inPage:==, ==inClient:==, both allow us to perform different actions to change the rendering logic. 

\sd{why inPage: and not inServer: (onServer: and onClient: would be better)}

See the example:

\sd{we should put the complete code}

[[[
	... 
	self add: (REButton new
			label: 'Login'; 
			callback: [
				self triggerThenDo: [ self login
							ifTrue: [ self inPage: [ self show: aComponent ] ] 
							ifFalse: [ self inClient: [ self asClient addClass: 'error' ] ] ] ].
]]]							


In this case, a new page (with aComponent contents) will be rendered if the login is successful, and an error class will be added to form if it doesn't.

!!!API

Here is the list

- ==[ ... ]== A block in Reef is a callback who leads to an interaction between client and server, without render a new page. Exception: callbacks on form elements.

- ==[ ... ] asReefPageCallback== Contents of block are executed, but all rendering is do it in a new page.

- ==[ ... ] asReefClientCallback== Contents of block are executed in rendering phase, and the result must be a JQuery Stream or a String.

- ==[ :me | ... ]==

- ==triggerThenDo:== 	Triggers the form element (if applied to a form triggers full form).

- ==asClient== 	jQuery object representation of reef component.

- ==inPage:== 	Renders the block contents in a new page.

- ==inClient:== 	Renders the block, in same page as we are now. It works just like ==asReefClientCallback==.

!!Interaction in Action

Now we will show you a simple application showing in practice the different interaction. 

!!Reef Defaults widgets

!!!Accordion
!!!Carousel

!!!Grids

!!!Calendar

!!Reef Core Explained

[[[
REForm new 
	add: (RETextInput new 
		autocomplete: [ :text | Smalltalk allClasses select: [ :each | each name asLowercase beginsWith: text ] ];
		yourself);
	yourself.
]]]


!! Conclusion
Reef is mega cool. 
