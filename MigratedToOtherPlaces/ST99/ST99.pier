! (Draft)[99ST] 99 Problems solved in Pharo

In this Chapter, you will find some little exercises to get started in Pharo. The idea of this chapter is that once we have a big collection of problems, it will eventually turn into a book on its own. So, join the game!. Everyone is invited to contribute with their own problems and corresponding solution(s).




!!Problem \#1: Solving Quadratic Equations
Written by Ignacio Sniechowski
!!! Description
Create the necessary classes to solve Quadratic Equations (see: *http://en.wikipedia.org/wiki/Quadratic_equation* for more information).

A Quadratic Equation has the form like Figure *quadraticEquation*
+A Quadratic Equation>file://figures/ax2bxc.pdf|width=40|label=quadraticEquation+

Where x is the unknown, and a, b, and c are constants with a not equal to 0.

-The term a is called the quadratic coefficient.
-The term b is called the linear coefficient.
-The term c is called the constant or free term.

In this problem, we are interesting in solving only those quadratic equations that have real roots, leaving those who have imaginary roots aside.

The formula used to solved this kind of equations is that of Figure *formula*
+The formula to solve QE>file://figures/xsolution.pdf|width=40|label=formula+






!!! Solution \#1

Let’s start by creating the following class:

[[[
Object subclass: #QuadraticEquation
	instanceVariableNames: 'quadraticCoefficient linearCoefficient constant roots'
	classVariableNames: ''
	category: '99ST-Problems'
]]]

The instance variables are self-explanatory; I’ve added a new category called 99ST-Problems to include here the following problems. Feel free to suit the category at your taste.

After that let’s start by adding the accessors:


[[[
QuadraticEquation>>setQuadraticCoefficient: aQC linearCoefficient: aLC constant: aC
	quadraticCoefficient := aQC.
	linearCoefficient := aLC.
	constant := aC
]]]


We add this method in this form, and not a method for each of the coefficients, as we most likely want to calculate the roots of an immutable quadratic equation. However, we must provide getters for each of the instance variables. So create the three methods for accessing those three instance variables:

[[[
QuadraticEquation>>quadraticCoefficient
	^ quadraticCoefficient
]]]

[[[
QuadraticEquation>>linearCoefficient
	^ linearCoefficient
]]]

[[[
QuadraticEquation>>constant
	^ constant
]]]

Categorize all these methods under the accessing protocol.

To calculate the roots we must get sure we are not attempting to calculate a negative square root in the following part of the formula used to solve the equation. So let’s continue by defining a new method that starts the calculation process:


[[[
QuadraticEquation>>calculateRoots

	^ self calculateRootsIfNone: [ 'No real solution for the equation' ]
]]]

This method sends a message to another method passing as argument a block. This block will be evaluated if the term mentioned above is negative, meaning that the quadratic equation has no real roots.
Enter the method and accept it (you will be prompted whether ==calculateRootsIfNone:== is an error. Of course it’s not an error, it’s a method we haven’t defined yet).

So now we define that method:

[[[
QuadraticEquation>>calculateRootsIfNone: aBlock

	| discriminant |
    discriminant := linearCoefficient  squared - ( 4 * quadraticCoefficient  * constant).
	^ discriminant >= 0 
			ifFalse: aBlock
			ifTrue: [ self solveRoots: discriminant]
]]]

We define here a temporary variable called ==discriminant==, which is the term we want to check whether it’s negative or not. Then comes a simple conditional checking. If the discriminant is negative the block passed as argument to this method is evaluated, showing ‘No real solution for the equation’, if the discriminant is true then we send a message to another method –that it’s not defined yet- passing the discriminant as argument.
Let’s define the last method then:

[[[
QuadraticEquation>>solveRoots: aDiscriminant

	| rootA rootB |
	roots := Set new.
	rootA := (linearCoefficient  negated + aDiscriminant sqrt) / (2 * quadraticCoefficient).
	rootB := (linearCoefficient  negated  - aDiscriminant sqrt) / (2 * quadraticCoefficient).
	roots add: rootA; add: rootB.
	^ roots
]]]

We first create a Set, which will contain the roots of the equation. We chose a Set for two reasons. First, in mathematic terms the roots of an equation form a set. Second, sets, in Smalltalk, do not allow for duplicate elements; therefore if our quadratic equations turns out to have similar roots, only one element will be added.
That’s it. Categorize all these methods under a calculations protocol and we are ready to check it:

First example: Let us try to find the roots of ==-3x^2\+2x\+2=0==

Open a Workspace and type:
[[[
| anEquation |
anEquation := QuadraticEquation new.
anEquation setQuadraticCoefficient: -3 linearCoefficient: 2 constant: 2. 
anEquation calculateRoots.
]]]

Now Print it and you will get:  ==a Set(-0.5485837703548636 1.2152504370215302)== Which are the roots of our equation. 

Now let’s try one that has no real solution like: ==3x^2\+2x\+2=0==
[[[
| anEquation |
anEquation := QuadraticEquation new.
anEquation setQuadraticCoefficient: 3 linearCoefficient: 2 constant: 2. 
anEquation calculateRoots.
]]]
Print it and you will get: =='No real solution for the equation'==

You can try to find a quadratic equation whose roots are equal and check that the Set has only one element.









!!Problem \#2: Calculating the Golden Ratio (Phi)
Written by Ignacio Sniechowski

!!! Description
While you are researching on how to solved the proposed Katas, let us explore the notion of reusable classes -a very important notion in Pharo. 

So, define a Class that calculates Phi, or the Golden Ratio. (see: *http://en.wikipedia.org/wiki/Golden_ratio* for more information).

You will see that after some algebraic manipulations, the equation to solve the Golden Ratio becomes a Quadratic Equation like that of Figure *phi*.
+The Quadratic Equation to solve Phi.>file://figures/goldenEQ.png|width=40|label=phi+

!!! Solution \#2
Let’s start by creating the following class:
[[[
QuadraticEquation subclass: #Phi
	instanceVariableNames: ''
	classVariableNames: ''
	category: '99ST-Problems'
]]]


As you can see, Phi will be a subclass of ==QuadraticEquation== which makes sense, we are reusing the Class we have created in the previous problem.

The rest is very simple, we don’t need to create accessors as those will be inherited from Phi’s superclass, ==QuadraticEquation==.

So let’s continue by defining the one and only method that performs the calculation:
[[[
Phi>>calculate
	| goldenNumber temp |

	goldenNumber := QuadraticEquation new.
	goldenNumber setQuadraticCoefficient: 1 linearCoefficient: -1  constant: -1.
	temp := goldenNumber calculateRoots.
	"The Golden Number is only the positive root of this quadratic equation"
	^ temp select: [  :each | each > 0 ]
]]]

We start by creating two temporal variables: ==goldenNumber== will be an instance of ==QuadraticEquation== class. We send a message to our new instantiated object with the appropriate arguments.
After that we store the object received by sending the ==calculateRoots== message to our newly instantiated object into temp, the other temporal variable. Of course, the object that will be stored will be a Set.

In this case, the Golden ratio is the positive root, so we get sure that the negative root will not get printed when we ==Print it==, in a ==Workspace==. That’s exactly what the last line of this method does, returns only the positive elements of the Set.

That’s it. Categorize this method under a calculations protocol and we are ready to check it:

Example:
Open a ==Workspace== and type:
[[[
| aGoldenNumber |
aGoldenNumber := Phi new.
aGoldenNumber calculate.
]]]

Now Print it and you will get: 

==a Set(1.618033988749895)==

Which is the solution to the Golden ratio equation.

!!Problem \#3:  Present Value of a stream of cash flows
Written by Ignacio Sniechowski

Create the necessary classes to calculate the Present Value of a certain, and fixed, cashflow over n number of years given a known discount rate. (see: *http://en.wikipedia.org/wiki/Present_value* for more information).
The most common used formula used to calculate the PV of a lump sum is that of Figure *pv_formula*
+The formula to calculate the Present Value>file://figures/pv_formula.jpg|width=40|label=pv_formula+
Where the Present Value (PV) is the sum of the future cash flows (FV) divided by (1 \+ discount rate (i) ) raised to t; the period.

!!! Solution \#3
We start by defining the instance variables that we should probably use: 
-cashFlow: which will be the fixed amount of money to receive each year.
-years: the number of years we will be receiving this money.
-discountRate: a reference interest rate to be used as the cost of money. We asume we will enter this rate in percentage form i.e 10 (will be 10%).


So let’s create the a class:
[[[
Object subclass: #PresentValue
	instanceVariableNames: 'cashFlow years discountRate'
	classVariableNames: ''
	category: '99ST-Problems'
]]]

So follwing we add the accessors:


[[[
PresentValue>>setCashFlow: aCF discountRate: aDR years: aP
	cashFlow := aCF.
	discountRate := aDR.
	years := aP
]]]


We add this accessor this way -setting all three instance variables in one method- as we want to calculate a given PV. Hence, it would be tedious to enter each argument with its method. However, we must provide getters for each of the instance variables. So create the three methods for accessing those three instance variables:

[[[
PresentValue>>cashFlow
	^ cashFlow
]]]

[[[
PresentValue>>discountRate
	^ discountRate
]]]

[[[
PresentValue>>years
	^ years
]]]

Categorize all these four methods under the accessing protocol.

Now add another protocol called calculations and enter the following method:

[[[
PresentValue>>calculatePV
	| flows decimalInterest |
	decimalInterest := discountRate / 100.0.
	flows := OrderedCollection new.
	[ years = 0 ] whileFalse: [ 
			flows add: cashFlow / ((1 + decimalInterest) raisedTo: years).
			years := years - 1 
								].
				
	^ flows inject: 0 into: [ :sum :each | sum + each ]
]]]

The first thing we do is translate the discount rate from percentage points into decimal form. To do that we use a temporal variable called ==decimalInterest== and set it to ==discountRate / 100.0==.
After that we create an ==OrderedCollection== in this case, the order IS important. It comes clear if you see the formula in detail. We give our ==OrderedCollection== the temporal name ==flows==.
Then we add a conditional loop. While the number of years is not 0, we calculate the Present Value of each cash flow, using the formula. Then decrease ==years== which in our conditional loop acts as a counter by 1.
The last thing we do is to make our method to return the sum of all the values of our ==OrderedCollection==.

That’s it. Categorize this method under a calculations protocol and we are ready to check it:

Example:
Open a ==Workspace== and type:
[[[
| aCashFlow |
aCashFlow := PresentValue new.
aCashFlow setCashFlow: 100 discountRate: 10  years: 5.
aCashFlow calculatePV.
]]]

Now Print it and you will get: == 379.07867694084473==


!!Problem \#4:  Net Present Value of a stream of cash flows
Written by Ignacio Sniechowski

Now that we have a way to calculate the Present Value of a certain cash flow, we can reuse this class to advance a little further. Suppose some Wall Street guru wants to sell you some interesting piece of financial engineering. This is a bond that will pay you $1,000 each year, over 10 years with no interest (a zero coupon bond). The guy tells you that this is a very attractive investment and pretends to sell you this asset for $8,500.
You return happy thinking you made a fantastic investment. Is that so?.


!!! Solution \#4

If we create a subclass of ==PresentValue== we can easily evaluate this investment. Basically our subclass (we are going to call it ==NetPresentValue==) will be the discounted cash flows promised by this bond, minus the investment needed to purchase it.

[[[
PresentValue subclass: #NetPresentValue
	instanceVariableNames: 'investment'
	classVariableNames: ''
	category: '99ST-Problems'
]]]

We have only one instance variable ==investment== which will hold the market value of the financial asset. That is, the price our Wall Street guru asks for it.
As we did with the superclass, we will only use one accessor to set the arguments:

[[[
NetPresentValue>> setCashFlow: aCF discountRate: aDR years: aN investment: aI
	cashFlow 		:= aCF.
	discountRate	:= aDR.
	years			:= aN.
	investment		:= aI
]]]

We have to add, of course, the accessor to get the value of the ==investment== instance variable.
[[[
NetPresentValue>>investment
	^ investment
]]]

Categorize all these methods under the accessing protocol.

Now the method that will actually perform the calculation is very simple:

[[[
NetPresentValue>>calculateNPV
	| pv |
	pv := PresentValue new.
	pv setCashFlow: cashFlow  discountRate: discountRate years: years.
	^ investment negated + pv calculatePV 

]]]
We use a temporary variable, ==pv== that will hold an instance of PresentValue. We obtain the present value of our future investment by first passing the arguments to ==pv==.
So we use the ==setCashFlow:discountRate:years:== selector from that class. After that we send the message ==calculatePV== to the instance of that class ==pv==.

The final step is to subtract the price our guru asks from the obtained present value. As we are entering a positive value for the investment (asset prices are always zero or positive numbers) we have to use ==negated== to turn it into a negative cash flow.
You call the bank to ask what rate they paid for a time deposit, the manager kindly inform you that they are now paying a 4% annually.
Let's now try if our guru was right. Open a Workspace and type:

[[[
| aNPV |
aNPV:= NetPresentValue new.
aNPV setCashFlow: 1000 discountRate: 4 years: 10 investment: 8500.
aNPV calculateNPV.
]]]
If we print it we obtain == -389.1042206449738==. Well, we should cleary put the money in the bank instead of buying this asset. You pay a visit to your Wall Street advisor and tell him about your conclusions. He smiles and says that your bank will be soon following other banks in lowering the interest rate.
You run to the bank to get that 4% rate and when you are there, the manager tells you that now they are paying only 3%. You re-run your calculations:

[[[
| aNPV |
aNPV:= NetPresentValue new.
aNPV setCashFlow: 1000 discountRate: 3 years: 10 investment: 8500.
aNPV calculateNPV.
]]]
And get: ==30.202836775830292==. You are now making some money. But hold on, be aware of comissions, they can ruin your expectations.

Going one step further: Now that you have a way to calculate both, Present Value and Net Present Value you can continue to build upon these classes and reuse code. We are now interested in calculating the discount rate that equalizes the investment with the present value of the cash flow.
That is which discount rate make the Net Present Value equal to zero. This concept, in finance is called the Internal Rate of Return (IRR) and it's a very important one. Some hints, you can use the Newton-Raphson method (which implies using mathematical derivates) or some sort of guessing algorithm using upper and lower bands.

!!!!Credits
 Thanks to Damien Cassou, Camille Teruel, Alain Busser, Stephane Ducasse and Ben Coman for their contributions.



!! About Katas
Now that you are finished with the previous list of problems you may wonder how to develop even better your skills and we propose you to have a look at katas.

In martial arts, practioners repeat basic or more elaborated movements to fully master them. The agile programming commnity took the idea and propose a list of exercises to practice programming. We provide a list of such Katas that you can use to practice your skills and the best way to do it is with friends during pair-programming sessions. 

- Cashier. This problem is how to represent a simple cashier machine. The simple version is that the machine has a list to handle the prices for bananas, apples and grapefoot. A second version is that now there are special price for example two bananas do not cost  twice the price of a single banana. A third version is should handle reduction like 10\%.

- Tennis score management systems. should write a description

- Rock Paper Scissors. should write a description

- Simple Miners. should write a description


Here is a list of resources on the net
- *http://agilekatas.co.uk*
- *http://codingdojo.org*
- *http://smalltalkhub.com/#!/~zeroflag/TDD-Kata*



% Local Variables:
% eval: (flyspell-mode -1)
% End:
