!Building a Simple Calculator with Spec

Written by Ignacio Sniechowsk

In this chapter we will develop a simple calculator to get started with Spec. Our focus will be on building the GUI to come up with a simple but good-looking calculator.
After designing the GUI we will move on to render this nice, but hollow interface operational (let's say we will focus first on the VC part of MVC, and later on the M). This chapter uses the version 2 of Spec that is available in Pharo 3.0.

!!Introduction


To construct our GUI we need to know what Spec expects to find in the class we will be creating. There are certain selectors and method that have to be present at instance and class side and that will be used by Spec when we do ==Specalc new openWithSpec==.

Basically, at the instance side of the class we will declare the widgets that we will be using, some aspects of these widgets like labels, actions, states, and the logic of the application and the glue between these widgets will have. On the other hand, at class side we will set up the basic design of our GUI -how the widgets are laid out- and its tittle.

Summarising:
- instance side: widget instantiation along with actions performed by these and application logic.
- class side: the composed layout i.e., how all our widgets will be laid out in a window.

So let us start by analysing the widgets we will be using.


SD: we should add a picture of what we want to build here.


!! The widgets

In this simple calculator we will need buttons to represent the 0 to 9 digits, some basic arithmetic operations, the dot to use floating numbers, a clear screen button, the = button to get the result, and some others like changing the sign, square rooting, etc. Also, we will need a display to see the numbers entered and get the result. 

But first things first. We have to create the class from which our calculator will be instantiated; we are going to use a composed layout model for our class, therefore our class will be a subclass of ==ComposableModel==.

So open the browser and create a new package called ==Specalc==, enter the following class definition and accept it. Don't worry, for now, about the instance variables we will get to that part soon.

!!! Defining the class Specalc

[[[
ComposableModel subclass: #Specalc
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Specalc'
]]]

Remember that we mentioned that when an instance of our calculator is ==openWithSpec==, Spec will send a message to some selectors that expect to find in our class -both at class and instance side-.

Our starting point will be implementing the method that will respond to the initializeWidgets selector. 
We want to have:
-10 buttons for the digits (0 to 9)
- a plus button, minus button, multiplication button, division button, and change sign button 
- clear display button, a dot button for entering float-numbers, an equals button, a square root button, and a log button. 

That is a total of 20 buttons. In addition, we will need the display.
This method can grow considerably depending on the number of widgets you might need. Therefore, it is sometimes convenient to break it down into simpler methods.
Here is our first draft of the initializeWidgets method:
Our starting point will be implementing the method that responds to the ==initializeWidgets== message. We want to have 10 buttons for the digits (0 to 9), a plus button, a minus button, a multiplication button, a division button, a change sign button, a clear display button, a dot button for entering float-numbers, an equal button, and a square root button, and a log button. That is a total of 20 buttons. In addition, we will need the display. 
This method can grow considerably depending on the number of widgets you might need. Therefore, it is sometimes convenient to break it down into simpler methods. 

Here is our first draft of the ==initializeWidgets== method:
!!! A draft of our initializeWidgets method
[[[
Specalc>>initializeWidgets 
	"instantiate the digit buttons"
	button0 := self newButton.
	button1 := self newButton.
	button2 := self newButton.
	button3 := self newButton.
	button4 := self newButton.
	button5 := self newButton.
	button6 := self newButton.
	button7 := self newButton.
	button8 := self newButton.
	button9 := self newButton.
	"instantiate the basic arithmetic buttons"
	buttonPlus	:= self newButton.
	buttonMinus := self	newButton.
	buttonMult	:= self newButton.
	buttonDiv	:= self newButton.
	buttonEq	:= self newButton.
	"instantiate the remaining buttons"
	buttonDot	 := self newButton.
	buttonSqr	 := self newButton.
	buttonLog	 := self newButton.
	buttonChange := self newButton.
	buttonClear	 := self newButton.
	"instantiate the display"
	display		:=	self newLabel.
	"send a message to format some aspects of the buttons"
	self formatDigitButtons.
	self formatOtherButtons
]]]

If the GUI you are building has only a limited number of widgets, you might even want to send some messages to the newly instantiated objects to set some of their attributes. In our case, as we said before, we are going to leave that to another method to avoid excessive cluttering.

So let us break down this method into more convenient and uncluttered ones.
!!! A cleaner version of the method
[[[
Specalc>>initializeWidgets 
	"instantiate the digit buttons"
	self initializeDigitButtons.
	"instantiate the basic arithmetic buttons and the remaining buttons"
	self initializeOtherButtons.
	"instantiate the display"
	display	:=	self newLabel
]]]
Upon accepting, you will be prompted whether initializeDigitButtons and, initializeOtherButtons are typos or are selectors who's code will be added later. Of course, it is not a typo these methods have not been defined yet. 
The same will happen with the instance variable display, so select declare as new instance variable. 
Upon accepting, you will be prompted whether ==initializeDigitButtons== and, ==initializeOtherButtons== are typos or are methods to be coded later. Of course, it is not a typo, these methods have not been defined yet. The same will happen to the instance variable ==display==, so select 'declare as new instance variable' when prompted. 

Then we define the other methods:
!!! The initializeDigitButtons method

[[[
Specalc>>initializeDigitButtons
   "instantiate the digit buttons"
   button0 := self newButton.
   button1 := self newButton.
   button2 := self newButton.
   button3 := self newButton.
   button4 := self newButton.
   button5 := self newButton.
   button6 := self newButton.
   button7 := self newButton.
   button8 := self newButton.
   button9 := self newButton.

   self formatDigitButtons
]]]
The same happens here, accept all buttonX as instance variables and formatDigitButtons as a new selector.
!!! The initializeDigitButtons method
[[[
Specalc>>initializeOtherButtons
	"instantiate the basic arithmetic buttons"
	buttonPlus	:= self newButton.
	buttonMinus := self	newButton.
	buttonMult	:= self newButton.
	buttonDiv	:= self newButton.
	buttonEq	:= self newButton.
	"instantiate the remaining buttons"
	buttonDot	 := self newButton.
	buttonSqr	 := self newButton.
	buttonLog	 := self newButton.
	buttonChange := self newButton.
	buttonClear	 := self newButton.
	
	self formatOtherButtons
]]]

Finally, we add one last initialisation method and categorise all these methods in the ==initialize== protocol. 

!!! The usual initialize method
[[[
Specalc>>initialize

	super initialize
]]]

SD: why do we need it if it is empty?

You should see all our initializers like in the Figure *figClass01*.

+Initialization methods of our calculator>file://figures/figClass01.png|width=95|label=figClass01+

!! Formating the widgets
Next, we will have to define the methods that we previously accepted Specalc>>formatDigitButtons and Specalc>>formatOtherButtons. These methods will send messages to the instance of buttons and label we have just instantiated telling them what to show, what to perform, etc.

	button0
		label: '0';
		action: [ display label: ((display label,'0') asNumber) asString];
		state: true.
		
	button1
		label: '1';
		action:  [ display label: ((display label,'1') asNumber) asString ];
		state: true.
		
	button2
		label: '2';
		action: [ display label: ((display label,'2') asNumber) asString ];
		state: true.
		
	button3
		label: '3';
		action: [ display label: ((display label,'3') asNumber) asString ];
		state: true.
		
	button4
		label: '4';
		action: [ display label: ((display label,'4') asNumber) asString ];
		state: true.
		
	button5
		label: '5';
		action: [ display label: ((display label,'5') asNumber) asString ];
		state: true.

	button6
		label: '6';
		action: [ display label: ((display label,'6') asNumber) asString ];
		state: true.
		
	button7
		label: '7';
		action:[ display label: ((display label,'7') asNumber) asString ];
		state: true.

	button8
		label: '8';
		action: [ display label: ((display label,'8') asNumber) asString ];
		state: true.
		
	button9
		label: '9';
		action: [ display label: ((display label,'9') asNumber) asString ];
		state: true
]]]

This is a long method, but it's very simple to dissect because once we have grasped the first button, the rest is similar.
So here is what each of these lines do. First we had the object instantiated in the previous methods: that's button0. 
If you follow the sequence of messages it's a cascade sent to the button0 object.

First we tell button0 to display some label on it, using the label: selector with a string as argument -in this case '0'. 
In the case of button1 label:'1' will obviously make the button show the digit 1 as label. 
Next is another selector; action: followed by a block.

Let's analyse what this block does. Recall that we instantiated a display object from Spec's LabelModel class which is actually the screen of our calculator.
Following the precedence of messages, the first evaluated expression is:
-(display label,'9')
We are sending a message to our display to retrieve the contents of it and concatenate the string '9'. 
Why? Basically because our display object might content some string of numbers previously entered and we want to put the newly pressed number behind of what's already on the screen. 
Then you noticed that we send the message asNumber, the purpose of this, is to avoid entering zeros that are not significant. 
When we convert our string to a number the non-relevant zeros are discarded otherwise we will have a calculator that will show awkward numbers like 000234, when only 234 should be displayed. 
Finally we convert that back to a string and pass this as an argument to the label: selector of our display. 
The result is that the display now contains what was previously there plus the content of our recently pushed button.

The last message we send is state: which accepts as an argument a boolean pseudo-variable. 
We set it to 'true' to avoid having to double click on each button to have a value entered on the display. 
You will notice when buttons are active because they show a pale blue shadow. Try setting the state to 'false' and you will see what annoying is to have to press two times each button.

A comment on style is appropriate here. The exposed method could have been written in a much more elegant and simple way, making the digit button object pass it's label instead of hard-coding the string '1' or '2', etc. However, I choose not to do it that way to keep it more easy to understand and follow.

Now is turn to format the other buttons. This is a little more tricky but no rocket science at all. Let's start by taking a look at the method, and then analyse it.
!!! Formating the other buttons
[[[
Specalc>>formatOtherButtons

	buttonPlus
		label: '+';
		action: [ self setFlag: $+ ];
		state: true.
	
	buttonMinus
		label: '-';
		action: [ self setFlag: $- ];
		state: true.
	
	buttonMult
		label: 'x';
		action: [ self setFlag: $x ];
		state: true.
	
	buttonDiv
		label: '/';
		action:  [ self setFlag: $/ ];
		state: true.
	
	buttonSqr
		label: 'Sqr';
		action: [self sqrCheck];
		state: true.
	
	buttonClear
		label: 'C';
		action: [ display label: '0' ];
		state: true.

	buttonDot
		label: '.';
		action: [ self dotCheck ];
		state: true.
	
	buttonChange
		label: '+/-';
		action: [ display label: (display label asNumber negated asString) ];
		state: true.

	buttonLog
		label: 'Log';
		action: [ self logCheck];
		state: true.
	
	buttonEq
		label: '=';
		action: [ self equals ];
		state: true
]]]

In these method there are some button's operations that are performed directly here, while others send a message to self. 
We are going to begin with those buttons that perform the operations within this method.
The first one we see is: buttonClear. It's pretty obvious what it does, instead of concatenating the contents of the display with another string-digit, this directly puts a zero in the display, hence reseting it.

The other one is buttonChange, which simply changes the sign of the digit displayed on the screen. The message precedence is important here but easy to follow. 

First we get the contents of the display by sending the label selector to our display object, then we convert this string into a number, then negated it, and finally convert it again to a string that is sent back to our display object using the label: selector.

Then we have the basic operations buttons: buttonPlus, buttonMinus, buttonDiv, buttonMult. What is important in this case is to focus on the block we will use as argument of our button object's action: selector.

This block is:
-[self setFlag: $_] 
-where _ is one of the operations to be performed. 

So clearly setFlag: is a selector of a method we haven't defined yet, but which sets a character literal flag that will allow our calculator's model know what type of arithmetic operation we want to perform.

So before continuing the dissection of this method we will take a little excursus to see what setFlag: does.

!!! The setFlag: method
[[[
Specalc>>setFlag: aFlag
	"stores the first value entered"
	previousLabel := (display label) asNumber.

	"sets the flag of the operation to be performed"
	currentFlag := aFlag.

	"clears the display"
	display label: ''
]]]

The first line stores the current content of our display object into an instance variable we named previousLabel, as a number so it's ready to be used by the basic binary arithmetic selectors.
Then we store the flag passed as argument to the setFlag: selector and store it into another instance variable called currentFlag. And finally we reset the display making it ready to receive another string -remember that the display of our calculator show strings. Up to here, we have an instance variable that holds our previously entered number and an instance variable that holds a flag for the operation we will be performed once the second number is entered. 
+Initialization methods of our calculator>file://figures/figClass02.png|width=95|label=figClass02+
So let's go back to our formatOtherButtons method.
The other buttons we need to deal with now are those who's action: selector have a block argument sending a message to perform some kind of check.
We will define those methods later, but just to give you an idea, those methods perform certain checks such as check we are not attempting to calculate the square root of a negative number, or that we don't pretend to enter two dots -remember that our display deals with strings so we could easily make a mistake an enter something like 1.234.54 which thou will be a valid string, it's obvious that won't be a valid number-. The last one logCheck deals with the fact that an error will occur if we try to perform the logarithm of 0, which is infinite.

Finally, the buttonEq is the core of our calculator and will be discussed once we have finished building the GUI. So go ahead and enter the formatOtherButtons method accepting those selectors that are not yet defined. 
Categorise these two methods under the initialization protocol. If you want to enter the setFlag: method, go ahead. However, it will be better to wait to finish the basic GUI and then concentrate ourselves in the core model of our calculator. If you decide to enter this method don't forget to accept our newly defined instance variables: currentFlag and previousLabel.

Once these two methods are entered and accepted you should have something similar to the Figure *figClass02*.

!! Class-side methods
""The --Dark-- Class side of Spec""

Now that we have defined, instantiated and formatted all the necessary widgets to build our calculator it's time to instruct Spec how to layout all this elements.
To do that, we'll have to create some class side methods.
We are going to begin with ==defaultSpec== which is what Spec will use to compose our model.

So here is the method, remember that has to be entered at class-side:
!!! The class-side defaultSpec method
[[[
Specalc class>>defaultSpec

	<spec>

	^ SpecLayout composed
		newColumn: [  :column | column add: #display;
			
			newRow: [ :row1 | row1		add: #buttonClear;
										add: #buttonLog;
										add: #buttonChange;
										add: #buttonSqr ] height: 26;
			
			newRow: [ :row2 | row2 	add: #button1;
								 		add: #button2; 
								 		add: #button3;
								 		add: #buttonDiv ] height:26; 
			
			newRow: [ :row3 | row3 	add: #button4;
								 		add: #button5;
								 		add: #button6;
								 		add: #buttonMult ] height: 26; 
			
			newRow: [  :row4 | row4 	add: #button7;
								  		add: #button8;
								  		add: #button9;
								  		add: #buttonMinus ] height: 26;
			
			newRow: [  :row5 | row5 	add: #buttonDot;
								  		add: #button0;
								  		add: #buttonEqual;
								  		add: #buttonPlus ] height: 26.
									];
		yourself.


]]]

The following Figure *layout*, will help us clarify how a Speclayout composed works. Basically 

+Composed Layout>file://figures/layoutDiagram.png|width=110|label=layout+

Basically we are setting up our widgets using a kind of matrix approach. Note, however that there's only one column and the rows are nested inside of it. So what this method actually does is to return SpecLayout composed [...], now if you inspect SpecLayout class you will notice that at class-side there's a method called composed which actually instantiates a SpecLayout object with #ContainerModel as its type. And what's a #ContainerModel? If you browse that class you will find the answer, but here is its comment: "I am a model for a container. My purpose is to hold multiple subwidgets to glue them together. I should not be used directly"

Therefore our [...] in the previous paragraph are exactly subwidgets glued together to form this container!. We are not going to go into details of how Spec works as there's a chapter devoted entirely to Spec.

Nevertheless, newColumn: and newRow: heigh: are two of many of the selectors SpecLayout has and you should really browse that class to know the subtle differences among some of them.

!!!One of the rows of our #ContainerModel
[[[
newRow: [ :row1 | row1	add: #buttonClear;
						add: #buttonLog;
						add: #buttonChange;
						add: buttonSqr ]
			height: 26.
]]] 

We are sending a keyword message here, newRow: a block that, when evaluated adds each of the widgets we have created to a new row; and height: 26 which sets the height our buttons will have. Notice that in this snippet I've put a dot at the end. Take into account that if more row are to be added, then should be a semicolon (as you can see in the whole method).

On a separate note, know that you can call this class-side method whatever you want as long as the <spec> pragma is there. 

The final class-side method we have to define is the one that will let Spec know how to title our window. It's very easy an self explanatory.

!!!Putting a title in our window
[[[
Specalc class>>title

	^ 'Calculator'
]]]

Pretty simple, isn't it?.

!! Almost ready to calculate



!! Conclusion

This chapter illustrates how to use Spec to build applications. A deeper explanation of Spec will be available in a companion chapter.



% Local Variables:
% eval: (flyspell-mode -1)
% End:
