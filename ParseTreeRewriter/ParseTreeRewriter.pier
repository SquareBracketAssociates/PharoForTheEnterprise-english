!Checking and Transforming Programs with Rewrite Engine


Manipulating programs automatically is a really powerful tool. A refactoring tool is a typical example. Another example is a rule checking engine such as the one presented in Chapter XXX. 
In this Chapter we present the underlying engine, named ParseTreeRewriter on top of which the 
Pharo refactoring browser and Critics browser are built. The ParseTreeRewriter has been developed by J. Brant and D. Roberts.

This powerful engine allows you to define abstract expressions to match and transform code. The engine is based on an abstract syntax tree unification algorithm that matches meta-variable to abstract syntax tree nodes and let you manipulate such meta-variables. 
In this chapter, we will first present the notion of abstract syntax tree, then the syntax of the parse tree rewriter expressions with practical examples. We also present Flamel an advanced editor to help user to express matching expressions. 

Authors: 
- Gisela Decuzzi
- StÃ©phane Ducasse
- Camille Teruel
- Anne Etien
- Jean-Christophe Bach

% http://pharorwrules.wordpress.com/2013/08/06/just-want-to-match/



!!Basic Knowledge on AST and other concepts

An abstract syntax tree (AST in short) is a data structure that is semantically
equivalent to some source code. While source code is just a string of
characters, an AST is a tree whose nodes correspond to the syntactic constructs
of the parsed language. In Pharo, an AST node can represent a method, a
message, a variable, a block, an assignment, etc. Such a tree is much easier
to process than a plain string. That is why this data structure is used by most
tools that have to deal with code.

Let's met our first AST. Consider the following method. 

[[[
Point >> < aPoint 
	"Answer whether the receiver is above and to the left of aPoint."

	^x < aPoint x and: [y < aPoint y]	
]]]	

You can get the AST of this method with the following expression. 

[[[
(Point >> #<) ast
]]]

The root of the AST is a method node whose child is a return node. This return node has a message node and this message node has a receiver (the AST of the expression ==x < aPoint x==), a selector (==and:==) and a block node as argument. Explore this AST to get familiar with its structure. You can also inspect the ASTs of other methods of the system.


+An inspector on an AST >file://figures/ASTInspector.pdf|width=50|label=astinspector+


Sending the message body ==body== to the ast returns the body of the method (as shown in Figure *astinspector* and ==selector== the method selector. 

[[[
(Point >> #<) ast body 
]]]

For example the AST of the following method is displayed in Figure *methodnode*.

[[[
selector: arg1 and: arg2
		  | temp1 temp2 |
		  temp1 := OrderedCollection new.
		  temp2 := arg1, arg2.
		  ^ temp1 + temp2
]]]

+The AST of the method ==selector:and:== >file://figures/methodnode.png|width=50|label=methodnode+


!!!Basic Knowledge on ProgramNode and its Subclasses

Different kinds of nodes correspond to different classes. These classes form a hierarchy whose root is ==RBProgramNode==. This class implements several useful methods such as: ==parent==, ==nodesDo:==, ==isVariable==.... Browse it and its subclasses to discover the structure and the capabilities of Pharo ASTs. 
%There is a visitor class that supports the walking through ASTs.

Here is a view on the ProgramNode hierarchy showing the classes and their instance variables. 
%(Camille: showing instance variables is maybe not good since it is subject to change in the near future)

+RBProgramNode class hierarchy>file://figures/classDiagram.jpg|width=100|label=programnode+

%TODO: image not clean, with pdf ok but does not work in html

!!Unification
The pattern matching algorithm in the engine rewriter is accomplished by a unification algorithm. This algorithm takes as input a pattern (that describes what we look for) and a tree (that could or not match the pattern). A pattern is a tree containing special nodes called meta-variables. A meta-variable is a variable whose value will be set by the unification algorithm. For example, a meta-variable can be used to match a variable while another can be used to match messages.

%The output of the algorithm is either false (there is no match found) or true.
%If it is true, that means that at least one match has been found. 
A match is a mapping from meta-variable to AST nodes of the input tree. These mappings correspond to the values the meta-variables of the pattern should take for the pattern to be equal to the input tree. 

Let's look at a few examples. If X and Y denote meta-variables, the pattern ==self X== matches ==self open== with the mapping: X -> 'open'. The pattern ==X Y== matches ==self open== with the mapping: Y -> 'self', Y -> 'open'. As a failing example, ==X X== doesn't match ==self open== because X cannot be at the same time 'self' and 'open'.



!! Pattern syntax

The ==`== character (backquote) creates a variable to match. Several options
can be used to specify the search: 

||!keyword  |! Meaning
|| @ | used alone: the searched node is a subtree
||   | used with an other keyword: the searched node is optional or can be repeated
|| . | the searched node is a statement
|| # | the searched node is a literal
|| \{ \} | to match nodes that satisfies the enclosed SmallTalk code
|| ` | to search recursively


{{{latex:\noindent }}}Let's explain each construct by using it in a concrete context:

!!! Single variables

==`== introduces the most basic meta-variable. ==`foo== only matches single
variables.

Examples: 

The following code enables to define a method node (lines 2 and 3) in which we
want to find the pattern ==`foo bar== (line 5) where ==`foo== can be any simple
receiver. The pattern containing the meta-variables ==`foo== is defined using
an RBParseTreeSearcher (lines 4 to 6). The resulting substitutions are gathered
into the ==answer== variable (line 7):

[[[lineNumber=true
| methodNode searcher |
methodNode := OpalCompiler new parse: 'test
x bar'.
searcher := RBParseTreeSearcher new.
searcher
	matches: '`foo bar'
	do: [ :aNode :answer | answer add: aNode ; yourself].
searcher executeTree: methodNode initialAnswer: Set new.
searcher answer.
]]]

In the following tables, only the code corresponding to the method node is
changed.


==`foo bar== ""matches"" the following expressions:

|! Input   ||! Result        |! Explanation
| x bar    || =={ foo=x }==    | ==x== is a variable
| self bar || =={ foo=self }== | ==self== is a RBSelfNode, that is considered as a variable
| OrderedCollection bar || =={ foo=OrderedCollection }== | ==OrderedCollection== is considered as a variable
| x toto ; bar || =={ foo=x }== | ==x toto; bar== is a RBCascadeNode composed of two message nodes ==x toto== and ==x bar==
| x bar. y bar    || =={ foo=x, foo=y }==    | ==x== and ==y== are variables
| self x bar. y bar || =={ foo=y }==  | ==y== is variable and ==self x== is not a single variable


==`foo bar== ""does not match"" the following expressions:

|! Input     |! Explanation
| bar        | The pattern must contain one and only one variable on which the bar selector is called
| 3 bar      | ==3== is a literal (not a variable)
| #(2 3) bar | ==#(2 3)== is a literal array
| {2. 3} bar | =={2. 3}== is an array
| #at bar    | ==#at== is a literal
| [true] bar | ==[true]== is a block
| (x:=1) bar | ==(x:=1)== is a statement
| self x bar | ==self x== is a RBMessageNode


!!! Literal variables

==`#lit== matches literals, e.g. numbers, string, literal arrays, booleans.

In this part, the following snippet of code is used. The matching expression is
changed to ==`#lit bar==.

[[[
| methodNode searcher |
methodNode := OpalCompiler new parse: 'test
3 bar'.
searcher := RBParseTreeSearcher new.
searcher
	matches: '`#lit bar'
	do: [ :aNode :answer | answer add: aNode ; yourself].
searcher executeTree: methodNode initialAnswer: Set new.
searcher answer.
]]]


==`#lit bar== ""matches"" the following expressions:

|! Input   ||! Result        |! Explanation
| 3 bar    || =={ lit=3 }==    | ==3== is a number
| 'foo' bar || =={ lit='foo' }== | =='foo'== is a string
| #at bar || =={lit=#at}== | ==#at== is a ByteSymbol
| #(a b c) bar || =={ lit=#(a b c)}== | ==#(a b c)== is a literal array
| true bar || =={lit=true}== |  ==true== is a boolean


==`#lit bar== ""does not match"" the following expressions:
|! Input  |! Explanation
| { 1. 2. 3 } bar | =={1. 2. 3}== is a collection
| (1/2) bar |  ==(1/2)== is a message (and not considered as a number)
| (1=1) bar |  ==(1=1)== is a message (and not considered as a boolean)

!!! Subtree or list  variables

%FIXME - TODO: first position is false, but bug 15272

==@== has several meanings depending it is used alone or with other option.

Used alone ==`@subtree== matches any subtree. 

==`@subtree bar== ""matches"" the following expressions:
|! Input        |! Result 
| self bar      | =={subtree=self}== 
| 3 bar         | =={subtree=3}==  
| #(2 3) bar    | =={subtree=#(2 3)}== 
| {2. 3} bar    | =={subtree={2. 3}}== 
| #at bar       | =={subtree=#at}== 
| [true] bar    | =={subtree=[true]}== 
| (x:=1) bar    | =={subtree=(x:=1)}== 
| self foo bar  | =={subtree=self foo}== 



==`@subtree bar== ""does not match"" the following expressions:
|! Input  |! Explanation
| bar      | The empty node is not a subtree

It has to be noticed that ==bar `@subtree== is not a valid pattern to look for
unary messages sequentially sent to ==bar== variable (''e.g.'' ==bar second
second third isEmpty== with ==bar== a collection of collections of
collections...). Figure XXXX is the tree representation of the previous
expression. There is ""no"" subtree to unify the pattern and the expression.


%TODO: image of the tree

Used with another option, ==@== denotes lists of 0 or more items. Examples are
given in each following subsection.


!!! Statements

==`.stmt== matches a single statement.

==`.stmt== ""matches"" the following expressions:
|! Input    |! Result 
| 3        | =={ stmt=3 }== 
| x:=1     | =={ stmt=x:=1 }== 
| x ifTrue: [ doSomething] | =={stmt=x ifTrue: [ doSomething]}==
| x:=1. ^x     | =={ stmt=x:=1, stmt=^x}== 


The ==.== option can be used with ==@== in order to build a pattern with
possibly several statements. In that case, ==`.@stmt== ""matches"" the
expression ==x:=1. ^x== with ==stmt== equals the whole expression ==x:=1. ^x==.


The following code illustrates the search of duplicated statements, for
instance to remove one of them:

[[[
| methodNode searcher codeToParse |
codeToParse := '|x|
    x:=0.
    x increase.
    x=1 ifTrue: [x bar].
    x=1 ifTrue: [x bar]'.
methodNode := RBParser parseExpression: codeToParse.
searcher := RBParseTreeSearcher new.
searcher
  matches: '|`@temporaries|
    `@.Statement1.
    `.Duplicate.
    `.Duplicate.
    `@.Statement2'
  do: [ :aNode :answer | answer add: aNode ; yourself].
searcher executeTree: methodNode initialAnswer: Set new.
searcher answer.
]]]

This snippet of code aims to search for duplicated statements in a piece of
code whose structure has to be explicitly specified in the pattern. Thus, the
pattern is composed of temporary variable declarations, possibly a list of
statements, the duplicated statement and possibly a list of other statements.

This pattern matches the content of ==codeToParse== variable with the following
substitutions:

|! Metavariables (pattern) |! Matched code
| ==`@temporaries==        | ==x==
| ==`@.Statement1==        | ==x:=0. x increase.==
| ==`.Duplicate==          | ==x=1 ifTrue: [x bar]==
| ==`@.Statement2==        | =={}==



!!! Conditional matching

==`{ :node | ''conditionOnNode'' }== matches a node satisfying
''conditionOnNode'' which is expressed in Pharo. The parsed code being not
executed, the condition concerns the characteristic of the node but cannot
refer to computed values of this code. 

The following snippet of code illustrates the conditional matching:

[[[
methodNode := OpalCompiler new parse: 'test
a := 1.
^a'.
searcher := RBParseTreeSearcher new.
searcher
	matches: '`{ :node | node name = #a}'
	do: [ :aNode :answer | answer add: aNode ; yourself].
searcher executeTree: methodNode initialAnswer: OrderedCollection new.
searcher answer.
]]]

Figure *conditionalMatchingInspector1* shows the inspector on answer. Two nodes
match the condition: the left-hand side of the assignment and the returned
variable.

+Inspector on answer>file://figures/conditionalMatchingInspector1.png|label=conditionalMatchingInspector1+

If the condition is changed as following:
[[[
methodNode := OpalCompiler new parse: 'test
a := 1.
^a'.
searcher := RBParseTreeSearcher new.
searcher
	matches: '`{ :node | node value = 1}'
	do: [ :aNode :answer | answer add: aNode ; yourself].
searcher executeTree: methodNode initialAnswer: OrderedCollection new.
searcher answer.
]]]

Only one node matches the condition: the right-hand side of the assignment.
Since the code of the parsed method is not executed, nodes corresponding to
==a== variable are not matched.

The condition can for example be used to only select node of a specific type
(''e.g.'' ==node isInstance== enables to select instance variables).



!!! Recursive search

==``== allows the recursive search. It means that the search is applied on the
initial input and then on the results and so on.

==``==  used alone may match a simple leaf node as in the following example:
==``foo bar== matches ==x bar bar== once and returns the result =={x=foo}==.



To be relevant, the result should be complex enough that it is possible to find
again the pattern in it. However, to define a complex pattern it is necessary
to use ==@==. 


The following example illustrates a real use of ==``== where the ==add:==
message is recursively searched: 
[[[
varNode := (RBParser parseExpression: '(self add: 4) add: (x add:3)').
searcher := RBParseTreeSearcher new.
searcher
  matches: '`@rcv add: ``@arg'
  do: [ :aNode :answer | answer add: aNode ; yourself].
searcher executeTree: varNode initialAnswer: OrderedCollection new.
searcher answer.
]]]


==`@rcv add: ``@arg'== matches ==(self add: 4) add:(x add:3)== with ==rcv=self
add:4== and ==arg=(x add:3)==. Due to the use of ==``== with ==arg==, the
pattern is also searched in the expression matching ==arg==. Therefore ==`@rcv
add: ``@arg'== matches ==x add:3== with ==rcv=x== and ==arg=3==. The pattern is
not searched in the expression matching ==rcv== since only one quote is used.

As a conclusion, ==``== is barely used alone, without ==@==. 






%%%%%%%%%%%%%%%%%%%%%%%%%

%The following table summarizes the use of ==`==, ==@== and ==``== with a
%concrete input:
%
%
%|!Pattern |! Input ||! Result 
%%| `r parent | x parent | Matches with ==x== as r
%| `r parent | x parent || =={ x }==
%%| `@r parent | x parent | Matches with ==x== as r
%| `@r parent | x parent || =={ x }==
%%| ``@r parent | x parent | Matches with ==x== as r
%| ``@r parent | x parent || =={ x }==
%%| ``r parent | x parent | Matches with ==x== as r
%| ``r parent | x parent || =={ x }==
%%| `r parent | x parent parent | Matches with ==x== as r
%| `r parent | x parent parent || =={ x }==
%%| `@r parent | x parent parent | Matches with ==x parent== as r
%| `@r parent | x parent parent || =={ x parent }==
%%| ``@r parent | x parent parent | Matches with ==x== as r and ==x parent== as r
%| ``@r parent | x parent parent || =={ x, x parent }==
%%| ``r parent | x parent parent | Matches with ==x== as r
%| ``r parent | x parent parent || =={ x }==
%


!! One example of matching expression 

TODO: delete let's, ref to Flamel, examples to refactor
!!! Step by Step

Let's start it with an example, imagine that we want to identify all the places where we have ==anObject globals at:==.

We want to identify message as the ones in the ==configurationClass== method below.

[[[
configurationClass
	^ Smalltalk globals at: self configurationName asSymbol
]]]

First try to look for the senders of the message ==globals==. You will see that you get couple hundreds of them and plenty of them 
are not sending ==at:== but ==at:ifAbsent:== or ==at:put:== or even nothing to do with ==at:==.

!!!!Let's write our first matching pattern.

First you want any object, it could be Smalltalk or another one so we use the ==`== operation to create a (meta)variable that we name ==anObject==. So we get 
[[[
`anObject
]]]

Then since we want the message ==globals== we add it and obtain.

[[[
`anObject globals
]]]

Note here that we do not annotate it with an operator because we do not want
any message selector but just ==globals==.  We redo the same for ==at:== so we
obtain the following pattern.


[[[
`anObject globals at: 
]]]

But this expression is not complete; an argument is missing to be a full Pharo
expressions. So we add another meta-variable that will match anything. 

[[[
`anObject globals at: `anything
]]]

!!!!Executing the rule
Now we have the pattern but we should execute it to get the matches. For now we will use a nice extension of the Refactoring rule engine called Flamel. 


[[[
FlamelRule new
   matchingExpression: '`anObject globals at: `anything';
   matchExpression;
   run;
   result
]]]


Execute and inspect the result. It may take some minutes because it is matching all the methods of the system. 
You get an RBParseTreeEnvironment and the results are in classSelectors and metaSelectors.
Let us explain the script, once the rule object is created we specify the expression using ==matchingExpression:==, then we specify that we want to match an expression (and not a complete method as we will explain in Section *MatchingMethods*, then we run the rule and ask for its results. 

!!!! Refining the scope

TODO: check if the scope can be refined directly in RB

Sometimes you do not want to look in the complete system but in a restricted environment. To do so we use the message ==scope:==


[[[
FlamelRule new
   matchingExpression: '`anObject globals at: `anything';
   matchExpression;
   scope: (RBPackageEnvironment packageName: 'Kernel');
   run;
   result
]]]


Now if we want to restrict the search to a subset of the environment.



!!! Dealing extras messages

When you look at the results of the previous pattern and you compare with the
system you will see that we are missing some of the cases.  For example we are
missing the following method. 

What you see here is in the ==ConfigurationGenerator>>configurationClass== is
that the pattern did not match because `anything matches only one element and
here we get ==newName asSymbol== which is not a single element.


[[[
ConfigurationGenerator>>configurationClass
	^ Smalltalk globals at: workingCopy package name asSymbol 
]]]

Finally another variation of the problem is the following one:

[[[
RBAddClass>>definitionClass
	^ Smalltalk globals at: (self superclassName ifNil: [ ^ ProtoObject ])
]]]

This problem can be addressed by using the ==@== operator in addition to ==`==.
==@== means that the element is optional and can be repeated.  The optional is
not illustrated by the example here but we will see later that you need it to
express that there could be zero or more elements or expressing that you can at
least one unary messages. Let us come back to our case we add ==@== to the
pattern as follows:


[[[
`anobject globals at: `@anything
]]]

Rexecute the query to see that you now get all the cases.

[[[
FlamelRule new
   matchingExpression: '`anObject globals at: `@anything';
   matchExpression;
   run;
   result
]]]


!!! Recursive matches

TODO: continue the example with recursive matches 
[[[
RBRenameClassChange>>changeClass
  ^Smalltalk globals at: oldName asSymbol ifAbsent: [ Smalltalk globals at: newName asSymbol ]
]]]

What's happen if a variable matches a complex expression that also contains the expression we are looking for.
For example 

Finally when trying to match an expression, there is another operator ==``== which supports recurvise match.

!! Matching Methods

@MatchingMethods

While matching expressions does not care of the whole context (such temporaries, assignment and method signatures), matching a complete method requires more advanced matching. For example if an expression is inside a block if we care about the fact that the methods
has temporaries.


- ==`.stmts== To match statements. The pattern ==`.Sta1.== matches

[[[
x := 1.
]]]

Combined with ==@==, you can match e list of statements. 
The pattern ==`@.stmts== matches any list of statements.


- ==`{ :node | ... }== To match the nodes that satisfy the enclosed Smalltalk code. The pattern ==`{ :node | node isInstance }== matches instance variables.








!!!Examples


[[[
| methodNode searcher  |
methodNode := OpalCompiler new parse: 'test 
| x |
x := 1. 
y := 2.
z := (self at: #x) size.
x + y'.

searcher := RBParseTreeSearcher new.
searcher
	matches: 'self at: `#literal'
      do: [ :aNode :answer | answer add: aNode ; yourself ].
searcher executeTree: methodNode initialAnswer: Set new.
searcher answer
]]]


[[[
| rbMethodNode |
rbMethodNode := OpalCompiler new parse: 'test 
| x |
x := 1. 
y := 2.
z := (self at: #x) size.
x + y'.

(RBParseTreeSearcher new
        matches: '`{:node | node isVariable }'
        do: [ :aNode :answer | answer add: aNode; yourself ] )
               executeTree: rbMethodNode initialAnswer: Set new.

]]]




self matcher
matches: '``@lotOfStuffBefore globals at: ``@lotOfStuffAfter'
do: [:theMatch :theOwner | theMatch inspect].

rule := SearchGlobalsAtUsage new.
environment := RBClassEnvironment class: Result.
RBSmalllintChecker runRule: rule onEnvironment: (environment)




[[[
| rbMethodNode |
rbMethodNode := OpalCompiler new parse: 'test 
| x |
x := 1. 
y := 2.
x + y'.

(RBParseTreeSearcher new
        matches: '`{:node | node isVariable }'
        do: [ :aNode :answer | answer add: aNode; yourself ] )
               executeTree: rbMethodNode initialAnswer: Set new.

]]]










[[[
| className realClass replacer category |
className := #MyClass.
realClass := Smalltalk at: className.
category := #accessing.
]]]

If you really just want the string 'tabs', the string 'tabs' with the
quotes is the search expression.

If you want to find it as part of a substring use something along:
[[[
   `#string `{ :node | node value isString and: [ node value
includesSubString: 'tabs' ] }
]]]

The ==`#string== is a literal pattern (booleans, characters, arrays,
strings, numbers, ...) and `{ ... adds a constraint on the preceeding
match.


[[[| className realClass replacer category |

className := #MyClass.
realClass := Smalltalk at: className.
category := #accessing.

replacer := RBParseTreeRewriter new
				replace: '`receiver oldMessage' with: '`receiver newMessage';
				yourself.
(realClass organization listAtCategoryNamed: category)
	collect: [:sel |
		| parseTree |
		parseTree := ( realClass >> sel) parseTree.
		(replacer executeTree: parseTree)
			ifTrue: [ realClass compile: replacer tree newSource " [1] " ] ]
]]]








!! Expressing and Executing Rules Without Flamel 

		Show the execution of the first example without Flamel
		- 

Before start you should choose if you want to:
perform a search
do a match
Implement your rules because all of them are abstract, probably you will end up using the Tree rules because are more automatics and powerfull than to basics.
When you are defining your rule:
- give a name for it
- define if you will use a method or an expression type pattern (use matches: or matchesMethod:)
- write your patterns and add them to the rule
- if you are in a search rule to the matcher
- if you are in a transformation rule rewriteRule
- define what to do with a result
run your rule
use your results
if you want to reuse it reset your rule, again if it's a search rule, reset the matcher, if it's a transformation rule the rewriteRule.



In our example:

we want to match, so let's create an object that extends: RBParseTreeLintRule:

[[[
RBParseTreeLintRule subclass: #SearchGlobalsAtUsage
	instanceVariableNames: ''
    classVariableNames: ''
    poolDictionaries: ''
    category: 'Blog-example'
]]]

We have to implement the abstract methods:

[[[
SearchGlobalsAtUsage>>name
	^ 'Find all potential wrong usage in with globals'
]]]

I want to match an expression type because I do not care about the rest of the method, I want everything that contains the messages: #globals #at:, we also have to say what to do with the matching node in this example I will open an inspector:


[[[
SearchGlobalsAtUsage>>initialize
		super initialize.
		self matcher
			 matches: '``@lotOfStuffBefore globals at: ``@lotOfStuffAfter'
			 do: [:theMatch :theOwner | theMatch inspect].
]]]

now we should run the rule:
WARNING: this can take a time because you will check the whole system

[[[
SearchGlobalsAtUsage new run.
]]]
To avoid this you can restrict the environment for your rule, an example:


[[[
rule := SearchGlobalsAtUsage new.
environment := RBClassEnvironment class: Result.
RBSmalllintChecker runRule: rule onEnvironment: (environment).
]]]
If you have matches then you will see the inspector.

So, as we can see this is quite complex, and in the sinposis you can see that before doing anything you have to make too many decisions, the idea behind Flamel is to make it easier.


The equivalent code (with a restricted environment) using Flamel for all this is:

[[[
FlamelRule new
 matchingExpression: '``@lotOfStuffBefore globals at: ``@lotOfStuffAfter';
 scope: environment;
 run;
 result
]]]
















!!Junk

- Variable. Un schÃ©ma peut contenir des variables en utilisant
  le backquote ou accent grave. Ainsi, ==`key== reprÃ©sente n'importe
  quelle variable, mais pas une expression.

- Liste. Pour reprÃ©senter une expression potentiellement
  complexe, on utilise ==@== qui caractÃ©rise une liste. Ainsi, `@key
  peut reprÃ©senter aussi bien une variable simple comme temp qu'une
  expression comme ==(aDict at: self keyForDict)==. Par exemple, | `@Temps
  | reconnaÃ®t une liste de variables temporaires. Le point . reconnaÃ®t
  une instruction dans une sÃ©quence de code.==`@.Statements==
  reconnaÃ®t une liste d'instructions. Par exemple, foo `@message:
  ==`@args== reconnaÃ®t n'importe quel message envoyÃ© Ã   foo.

- RÃ©cursion. Pour que la reconnaissance s'effectue aussi Ã  
  l'intÃ©rieur de l'expression, il faut doubler la quote. La seconde
  quote reprÃ©sente la rÃ©cursion du schÃ©ma cherchÃ©. Ainsi,
  ==``@object foo== reconnaÃ®t foo, Ã   quelque objet qu'il soit envoyÃ©,
  mais observe Ã©galement pour chaque reconnaissance si une
  reconnaissance est possible dans la partie reprÃ©sentÃ©e par la
  variable ==``@object==.

-	LittÃ©raux. ==#== reprÃ©sente les littÃ©raux. ainsi, ==`#literal==
  reconnaÃ®t n'importe quel littÃ©ral, par exemple 1, ==#()==, "unechaine"
  ou ==#unSymbol==.


!!!Des exemples d'identification de schÃ©mas

Si l'on veut identifier les expressions de type ==aDict at: aKey ifAbsent: aBlock== dans lesquelles les variables peuvent Ãªtre des expressions composÃ©es, on Ã©crit l'expression
suivante : ==``@aDict at: ``@aKey ifAbsent: ``@aBlock.==
Une telle expression identifie par exemple les expressions suivantes :

[[[
instVarMap at: aClass name ifAbsent: [oldClass instVarNames]
deepCopier references at: argumentTarget ifAbsent: [argumentTarget]
bestGuesses at: anInstVarName ifAbsent: [self typesFor: anInstVarName]
object at: (keyArray at: selectionIndex) ifAbsent: [nil]
]]]

Comme l'interface en Squeak ne permet pas encore de sÃ©lectionner les
classes sur lesquelles on veut travailler, le systÃ¨me analyse les 1
934 classes et quelque 42 869 mÃ©thodes qui sont disponibles dans la
distribution de base, ce qui peut sensiblement ralentir le traitement.

Voici quelques exemples d'
expressions qui pourraient Ãªtre avantageusement transformÃ©es :

[[[
| `@Temps | ``@.Statements. ``@Boolean ifTrue: [^false]. ^true
| `@Temps | ``@.Statements. ^``@Boolean not
``@object not ifTrue: ``@block
``@object ifFalse: ``@block.
]]]

[[[
RBParseTreeRewriter new
 	replace: '``@aDictionary at: ``@key
 		ifAbsent:
 			[| `@Temps |
 			``@.Statements.
 			``@aDictionary at: ``@key put: ``@value]' with: '``@aDictionary at: ``@key
 		ifAbsentPut:
 			[| `@Temps |
 			``@.Statements.
 			``@value]';
	yourself
]]]

[[[
rule := RBUnderscoreAssignmentRule new.
environment := BrowserEnvironment new forPackageNames: #('PackageA'
'PackageB' ...).
SmalllintChecker runRule: rule onEnvironment: environment.
rule open
]]]

[[[
ORLintBrowser
	openRule: (RBCompositeLintRule rules: (RBCompositeLintRule
rulesGroupedFor: RBSpellingRule) name: 'Spelling')
	environment: (BrowserEnvironment new forPackageNames: #('Kernel'
'Collections-Abstract'))
]]]
