!Checking Programs with Rewrite Engine


Manipulating programs automatically is a really powerful tool. A refactoring tool is a typical example. Another example is a rule checking engine such as the one presented in Chapter XXX. 
In this Chapter we present the underlying engine, named ParseTreeRewriter on top of which the 
Pharo refactoring browser and Critics browser are built. The ParseTreeRewriter has been developed by J. Brant and D. Roberts.

This powerful engine allows you to define abstract expressions to match and transform code. The engine is based on an abstract syntax tree unification algorithm that matches meta-variable to abstract syntax tree nodes and let you manipulate such meta-variables. 
In this chapter, we will first present the notion of abstract syntax tree, then the syntax of the parse tree rewriter expressions with practical examples. We also present Flamel an advanced editor to help user to express matching expressions. 

Authors: 
- Gisela Decuzzi
- StÃ©phane Ducasse
- Camille Teruel
- Anne Etien
- Jean-Christophe Bach

% http://pharorwrules.wordpress.com/2013/08/06/just-want-to-match/



!!Basic Knowledge on AST and other concepts

An abstract syntax tree (AST in short) is a data structure that is semantically
equivalent to some source code. While source code is just a string of
characters, an AST is a tree whose nodes correspond to the syntactic constructs
of the parsed language. In Pharo, an AST node can represent a method, a
message, a variable, a block, an assignment, etc. Such a tree is much easier
to process than a plain string. That is why this data structure is used by most
tools that have to deal with code.

In order to illustrate the structure of AST, consider the following method. 

[[[lineNumber=true
Point >> < aPoint 
	"Answer whether the receiver is above and to the left of aPoint."

	^x < aPoint x and: [y < aPoint y]	
]]]	

The AST of this method can be obtained with the following expression:

[[[language=smalltalk
(Point >> #<) ast
]]]

Note that the ==ast== message is available only for compiled methods.

+An inspector on an AST >file://figures/ASTInspector.png|width=100|label=astinspector+


The root of the AST is a method node which has two children, an argument node
and a sequence node (1) corresponding to the body of the method. This sequence
node has a single child, a return node (2). This return node has a message node
(3) corresponding to the expression ==x < aPoint x and: [y < aPoint y]==. This
message node has a receiver (a message node (4) corresponding to the AST of the
expression ==x < aPoint x==) and a block node (5) as argument (==[y < aPoint
y]==). 

Node (4) has two children: a variable node ==x==, corresponding to the
receiver, and a message node (==aPoint x==) corresponding to the argument. This
argument has a single child ==aPoint== corresponding to the argument.

The block node (5) has a single child (6) corresponding to the sequence node.
This also has a child (7) which has the same structure as (4).

The selectors do not appear in the tree representation because they are
properties of the message nodes. Thus, for example, the selector ==<== of the
message node (4) does not appear in this tree representation but is obviously
accessible from the message node though the ==selector== message.  



Explore this AST to get familiar with its structure. You can also inspect the ASTs of other methods of the system.





!!!Basic Knowledge on ProgramNode and its Subclasses

Different kinds of nodes correspond to different classes. These classes form a
hierarchy whose root is ==RBProgramNode==. This class implements several useful
methods such as: ==parent==, ==nodesDo:==, ==isVariable==.... Browse it and its
subclasses to discover the structure and the capabilities of Pharo ASTs.
Figure *programnode* illustrates the ProgramNode hierarchy. 

+RBProgramNode class hierarchy>file://figures/classDiagram.jpg|width=100|label=programnode+

%TODO: image not clean, with pdf ok but does not work in html

!!Unification

The pattern matching algorithm in the engine rewriter is accomplished by a
unification algorithm. This algorithm takes as input a pattern (that describes
what we look for) and a tree (that could or not match the pattern). A pattern
is a tree containing special nodes called meta-variables. A meta-variable is a
variable whose value will be set by the unification algorithm. For example, a
meta-variable can be used to match a variable while another can be used to
match messages.

A match is a mapping from meta-variable to AST nodes of the input tree. These
mappings correspond to the values the meta-variables of the pattern should take
for the pattern to be equal to the input tree. 

Consider the following examples: if X and Y denote meta-variables, the pattern
==self X== matches ==self open== with the mapping: ==X -> open==. The pattern
==X Y== matches ==self open== with the mapping: ==X -> self==, ==Y -> open==.
As a failing example, ==X X== does not match ==self open== because X cannot be
at the same time ==self== and ==open==.


!! Pattern syntax

The ==`== character (backquote) creates a variable to match. Several options
can be used to specify the search: 

||!keyword  |! Meaning
|| @ | used alone: the searched node is a subtree
||   | used with an other keyword: the searched node is optional 
||   | or can be repeated
|| . | the searched node is a statement
|| # | the searched node is a literal
|| \{ \} | to match nodes that satisfies the enclosed SmallTalk code
|| ` | to search recursively


Each construct is explained in the following section by
using it in concrete examples.

!!! Single variables

==`== introduces the most basic meta-variable. ==`foo== only matches single
variables.

The following code enables to define a method node (lines 2 and 3) in which we
want to find the pattern ==`foo bar== (line 6) where ==`foo== can be any simple
receiver. The pattern containing the meta-variables ==`foo== is defined using
an RBParseTreeSearcher (lines 4 to 6). The resulting substitutions are gathered
into the ==answer== variable (line 7):

[[[lineNumber=true
| methodNode searcher |
methodNode := OpalCompiler new parse: 'test
x bar'.
searcher := RBParseTreeSearcher new.
searcher
	matches: '`foo bar'
	do: [ :aNode :answer | answer add: aNode ; yourself].
searcher executeTree: methodNode initialAnswer: Set new.
searcher answer.
]]]

In the following tables, only the code corresponding to the method node is
changed.


==`foo bar== ""matches"" the following expressions:
|! Input   ||! Result        |! Explanation
| x bar    || =={ foo->x }==    | ==x== is a variable
| self bar || =={ foo->self }== | ==self== is a RBSelfNode, that is 
| || | considered as a variable
| Array bar || =={ foo->Array }== | ==Array== is considered  as a variable
%| || | as a variable
| x toto ; bar || =={ foo->x }== | ==x toto; bar== is a RBCascadeNode 
| || | composed of two message nodes 
| || | ==x toto== and ==x bar==
| x bar. y bar    || =={ foo->x, foo->y }==    | ==x== and ==y== are variables
| self x bar. y bar || =={ foo->y }==  | ==y== is variable and ==self x== is not
| || |  a single variable

==`foo bar== ""does not match"" the following expressions:

|! Input     |! Explanation
| bar        | The pattern must contain one and only one variable on 
| | which the bar selector is called
| 3 bar      | ==3== is a literal (not a variable)
| #(2 3) bar | ==#(2 3)== is a literal array
| {2. 3} bar | =={2. 3}== is an array
| #at bar    | ==#at== is a literal
| [true] bar | ==[true]== is a block
| (x:=1) bar | ==(x:=1)== is a statement
| self x bar | ==self x== is a RBMessageNode


!!! Literal variables

==`#lit== matches literals, e.g. numbers, string, literal arrays, booleans.

In this part, the following snippet of code is used. The matching expression is
changed to ==`#lit bar==.

[[[lineNumber=true
| methodNode searcher |
methodNode := OpalCompiler new parse: 'test
3 bar'.
searcher := RBParseTreeSearcher new.
searcher
	matches: '`#lit bar'
	do: [ :aNode :answer | answer add: aNode ; yourself].
searcher executeTree: methodNode initialAnswer: Set new.
searcher answer.
]]]


==`#lit bar== ""matches"" the following expressions:

|! Input   ||! Result        |! Explanation
| 3 bar    || =={ lit=3 }==    | ==3== is a number
| 'foo' bar || =={ lit='foo' }== | =='foo'== is a string
| #at bar || =={lit=#at}== | ==#at== is a ByteSymbol
| #(a b c) bar || =={ lit=#(a b c)}== | ==#(a b c)== is a literal array
| true bar || =={lit=true}== |  ==true== is a boolean


==`#lit bar== ""does not match"" the following expressions:
|! Input  |! Explanation
| { 1. 2. 3 } bar | =={1. 2. 3}== is a collection
| (1/2) bar |  ==(1/2)== is a message (and not considered as a number)
| (1=1) bar |  ==(1=1)== is a message (and not considered as a boolean)

!!! Subtree or list  variables

%FIXME - TODO: bug 15272

==@== has several meanings depending it is used alone or with other option.

Used alone ==`@subtree== matches any subtree. 

==`@subtree bar== ""matches"" the following expressions:
|! Input        |! Result 
| self bar      | =={subtree=self}== 
| 3 bar         | =={subtree=3}==  
| #(2 3) bar    | =={subtree=#(2 3)}== 
| {2. 3} bar    | =={subtree={2. 3}}== 
| #at bar       | =={subtree=#at}== 
| [true] bar    | =={subtree=[true]}== 
| (x:=1) bar    | =={subtree=(x:=1)}== 
| self foo bar  | =={subtree=self foo}== 



==`@subtree bar== ""does not match"" the following expressions:
|! Input  |! Explanation
| bar      | The empty node is not a subtree

It has to be noticed that ==bar `@subtree== is not a valid pattern to look for
unary messages sequentially sent to ==bar== variable (''e.g.'' ==bar second
second third isEmpty== with ==bar== a collection of collections of
collections...). 

Figure *exp-and-pattern* illustrates this expression that will not be matched
by the pattern. The left tree is the representation of the previous expression,
the right one is the pattern ==bar `@subtree==. There is ""no"" subtree to
unify the pattern and the expression: trees are similar, but in this situation,
==`@subtree== would represent an upper part of the tree instead of a
""sub""tree, meaning that ==bar== is the subtree instead of the metavariable
==subtree==.

+Illustration of an invalid pattern for a specific expression>file://figures/expression_and_pattern.jpg|width=100|label=exp-and-pattern+

Used with another option, ==@== denotes lists of 0 or more items. Examples are
given in each following subsection.


!!! Statements

==`.stmt== matches a single statement.

==`.stmt== ""matches"" the following expressions:
|! Input    |! Result 
| 3        | =={ stmt=3 }== 
| x:=1     | =={ stmt=x:=1 }== 
| x ifTrue: [ doSomething] | =={stmt=x ifTrue: [ doSomething]}==
| x:=1. ^x     | =={ stmt=x:=1, stmt=^x}== 


The ==.== option can be used with ==@== in order to build a pattern with
possibly several statements. In that case, ==`.@stmt== ""matches"" the
expression ==x:=1. ^x== with ==stmt== equals the whole expression ==x:=1. ^x==.


The following code illustrates the search of duplicated statements, for
instance to remove one of them:

[[[lineNumber=true
| methodNode searcher codeToParse |
codeToParse := '|x|
    x:=0.
    x increase.
    x=1 ifTrue: [x bar].
    x=1 ifTrue: [x bar]'.
methodNode := RBParser parseExpression: codeToParse.
searcher := RBParseTreeSearcher new.
searcher
  matches: '|`@temporaries|
    `@.Statement1.
    `.Duplicate.
    `.Duplicate.
    `@.Statement2'
  do: [ :aNode :answer | answer add: aNode ; yourself].
searcher executeTree: methodNode initialAnswer: Set new.
searcher answer.
]]]

This snippet of code aims to search for duplicated statements in a piece of
code whose structure has to be explicitly specified in the pattern. Thus, the
pattern is composed of temporary variable declarations (line 10), possibly a
list of statements (line 11), the duplicated statement (lines 12 and 13) and
possibly a list of other statements (line 14).

This pattern matches the content of ==codeToParse== variable with the following
substitutions:

|! Metavariables (pattern) |! Matched code
| ==`@temporaries==        | ==x==
| ==`@.Statement1==        | ==x:=0. x increase.==
| ==`.Duplicate==          | ==x=1 ifTrue: [x bar]==
| ==`@.Statement2==        | =={}==



!!! Conditional matching

==`{ :node | ''conditionOnNode'' }== matches a node satisfying
''conditionOnNode'' which is expressed in Pharo. The parsed code being not
executed, the condition concerns the characteristic of the node but cannot
refer to computed values of this code. 

The following snippet of code illustrates the conditional matching:

[[[lineNumber=true
methodNode := OpalCompiler new parse: 'test
a := 1.
^a'.
searcher := RBParseTreeSearcher new.
searcher
	matches: '`{ :node | node name = #a}'
	do: [ :aNode :answer | answer add: aNode ; yourself].
searcher executeTree: methodNode initialAnswer: OrderedCollection new.
searcher answer.
]]]

Figure *conditionalMatchingInspector1* shows the inspector on answer. Two nodes
match the condition: the left-hand side of the assignment and the returned
variable.

+Inspector on answer>file://figures/conditionalMatchingInspector1.png|label=conditionalMatchingInspector1+

If the condition is changed as following:
[[[lineNumber=true
methodNode := OpalCompiler new parse: 'test
a := 1.
^a'.
searcher := RBParseTreeSearcher new.
searcher
	matches: '`{ :node | node value = 1}'
	do: [ :aNode :answer | answer add: aNode ; yourself].
searcher executeTree: methodNode initialAnswer: OrderedCollection new.
searcher answer.
]]]

Only one node matches the condition: the right-hand side of the assignment.
Since the code of the parsed method is not executed, nodes corresponding to
==a== variable are not matched.

The condition can for example be used to only select node of a specific type
(''e.g.'' ==node isInstance== enables to select instance variables).



!!! Recursive search

==``== allows the recursive search. It means that the search is applied on the
initial input and then on the results and so on.

==``==  used alone may match a simple leaf node as in the following example:
==``foo bar== matches ==x bar bar== once and returns the result =={x=foo}==.



To be relevant, the result should be complex enough that it is possible to find
again the pattern in it. However, to define a complex pattern it is necessary
to use ==@==. 


The following example illustrates a real use of ==``== where the ==add:==
message is recursively searched: 
[[[lineNumber=true
varNode := (RBParser parseExpression: '(self add: 4) add: (x add:3)').
searcher := RBParseTreeSearcher new.
searcher
  matches: '`@rcv add: ``@arg'
  do: [ :aNode :answer | answer add: aNode ; yourself].
searcher executeTree: varNode initialAnswer: OrderedCollection new.
searcher answer.
]]]


==`@rcv add: ``@arg'== matches ==(self add: 4) add:(x add:3)== with ==rcv=self
add:4== and ==arg=(x add:3)==. Due to the use of ==``== with ==arg==, the
pattern is also searched in the expression matching ==arg==. Therefore ==`@rcv
add: ``@arg'== matches ==x add:3== with ==rcv=x== and ==arg=3==. The pattern is
not searched in the expression matching ==rcv== since only one quote is used.

As a conclusion, ==``== is barely used alone, without ==@==. 


%%%%%%%%%%%%%%%%%%%%%%%%%

!! A new example of matching expression 

!!! Step by Step

This example illustrates how to identify all the places where ==anObject
globals at:== is used.

The ==configurationClass== method below is one of the expected results.

[[[
configurationClass
	^ Smalltalk globals at: self configurationName asSymbol
]]]

Looking for the senders of the message ==globals== shows hundreds of messages
and plenty of them are not sending ==at:== but ==at:ifAbsent:== or ==at:put:==
or even nothing to do with ==at:==.

!!!!Writing the matching pattern.

To match any object (''e.g.'' Smalltalk or another one) sent to the message
==globals== we use the ==`== operation to create a (meta)variable named
==anObject== and obtain.

[[[
`anObject globals
]]]

Note here that ==globals== is not annotated with an operator because we do not
want any message selector but just ==globals==.  The same is done for ==at:==.


[[[
`anObject globals at: 
]]]

But this expression is not complete; an argument is missing to be a full Pharo
expression. A new meta-variable matching anything is added. 

[[[
`anObject globals at: `anything
]]]

!!!!Defining a rule

Looking for pattern can be stored in a rule. For this purpose, a subclass of
RBParseTreeLintRule, RBGlobalsAtRule is created. 

[[[lineNumber=true
RBParseTreeLintRule subclass: #RBGlobalsAtRule 
	instanceVariableNames: ''
    classVariableNames: ''
    poolDictionaries: ''
    category: 'RB-example'
]]]

The abstract methods ==initialize== and ==name== should be implemented.  The
==initialize== method is the following. Line 4 corresponds to the searched
expression.

[[[lineNumber=true
RBGlobalsAtRule>>initialize
	super initialize.
	self matcher 
		matches: '`anObject globals at: `anything'
		do: [ :node :answer | node ]
]]]

The ==name== method should also be added.

[[[
RBGlobalsAtRule>>name
	^ 'Find all potential wrong usage in with globals'
]]]


!!!!Executing the rule
To get the matches, the rule should be executed. 

WARNING: this can take a time because the whole system is checked.

[[[
RBGlobalsAtRule new run.
]]]


Execute and inspect the result. It may take some minutes because it is matching
all the methods of the system.  The results are in ==classSelectors== and
==metaSelectors== of the ==RBParseTreeEnvironment==. 


!!!! Refining the scope

To avoid looking in the complete system, the environment of the rule can be
restricted using the ==runRule:onEnvironment:== message as the following:

[[[
rule := SearchGlobalsAtUsage new.
environment := RBClassEnvironment class: Result.
RBSmalllintChecker runRule: rule onEnvironment: (RBPackageEnvironment packageName: 'KernelTests').
]]]


!!! Dealing extras messages

Some cases are missing such as ==ConfigurationGenerator>>configurationClass==.

[[[
ConfigurationGenerator>>configurationClass
	^ Smalltalk globals at: workingCopy package name asSymbol 
]]]

The pattern did not match because ==`anything== matches only one element and
==newName asSymbol== is not a single element.


Finally another variation of the problem is the following one:

[[[
RBAddClass>>definitionClass
	^ Smalltalk globals at: (self superclassName ifNil: [ ^ ProtoObject ])
]]]

These problems can be addressed by using the ==@== operator in addition to
==`==. Modify the ==initialize== message of RBGlobalsAtRule as follows:

[[[lineNumber=true
RBGlobalsAtRule>>initialize
	super initialize.
	self matcher 
		matches: '`anObject globals at: `@anything'
		do: [ :node :answer | node ]
]]]

Execute again the rule to see that the result contains all the cases.


!!! Recursive matches

Result is not complete for example ==RBRenameClassChange>>changeClass==
matches only once whereas ==Smalltalk globals at:== appears twice in the
body of the method:

[[[
RBRenameClassChange>>changeClass
  ^Smalltalk globals at: oldName asSymbol ifAbsent: [ Smalltalk globals at: newName asSymbol ]
]]]

This problem is addressed by using the ==``== operator. Modify the
==initialize== message of RBGlobalsAtRule as follows:

[[[lineNumber=true
RBGlobalsAtRule>>initialize
	super initialize.
	self matcher 
		matches: '`anObject globals at: ``@anything'
		do: [ :node :answer | node ]
]]]

Execute again the rule to see that the result contains all the cases.

!!! Notes

In the previous example the results are only expressions. To get methods, the
==matches:== message should be replaced by ==matchesAnyMethodOf:== in the
==initialize== method. In that case, the full method should be described with
potential temporary variables, optional statements, etc.


%
%!!Junk
%
%- Variable. Un schÃ©ma peut contenir des variables en utilisant
%  le backquote ou accent grave. Ainsi, ==`key== reprÃ©sente n'importe
%  quelle variable, mais pas une expression.
%
%- Liste. Pour reprÃ©senter une expression potentiellement
%  complexe, on utilise ==@== qui caractÃ©rise une liste. Ainsi, `@key
%  peut reprÃ©senter aussi bien une variable simple comme temp qu'une
%  expression comme ==(aDict at: self keyForDict)==. Par exemple, | `@Temps
%  | reconnaÃ®t une liste de variables temporaires. Le point . reconnaÃ®t
%  une instruction dans une sÃ©quence de code.==`@.Statements==
%  reconnaÃ®t une liste d'instructions. Par exemple, foo `@message:
%  ==`@args== reconnaÃ®t n'importe quel message envoyÃ© Ã   foo.
%
%- RÃ©cursion. Pour que la reconnaissance s'effectue aussi Ã  
%  l'intÃ©rieur de l'expression, il faut doubler la quote. La seconde
%  quote reprÃ©sente la rÃ©cursion du schÃ©ma cherchÃ©. Ainsi,
%  ==``@object foo== reconnaÃ®t foo, Ã   quelque objet qu'il soit envoyÃ©,
%  mais observe Ã©galement pour chaque reconnaissance si une
%  reconnaissance est possible dans la partie reprÃ©sentÃ©e par la
%  variable ==``@object==.
%
%-	LittÃ©raux. ==#== reprÃ©sente les littÃ©raux. ainsi, ==`#literal==
%  reconnaÃ®t n'importe quel littÃ©ral, par exemple 1, ==#()==, "unechaine"
%  ou ==#unSymbol==.
%
%
%!!!Des exemples d'identification de schÃ©mas
%
%Si l'on veut identifier les expressions de type ==aDict at: aKey ifAbsent: aBlock== dans lesquelles les variables peuvent Ãªtre des expressions composÃ©es, on Ã©crit l'expression
%suivante : ==``@aDict at: ``@aKey ifAbsent: ``@aBlock.==
%Une telle expression identifie par exemple les expressions suivantes :
%
%[[[lineNumber=true
%instVarMap at: aClass name ifAbsent: [oldClass instVarNames]
%deepCopier references at: argumentTarget ifAbsent: [argumentTarget]
%bestGuesses at: anInstVarName ifAbsent: [self typesFor: anInstVarName]
%object at: (keyArray at: selectionIndex) ifAbsent: [nil]
%]]]
%
%Comme l'interface en Squeak ne permet pas encore de sÃ©lectionner les
%classes sur lesquelles on veut travailler, le systÃ¨me analyse les 1
%934 classes et quelque 42 869 mÃ©thodes qui sont disponibles dans la
%distribution de base, ce qui peut sensiblement ralentir le traitement.
%
%Voici quelques exemples d'
%expressions qui pourraient Ãªtre avantageusement transformÃ©es :
%
%[[[lineNumber=true
%| `@Temps | ``@.Statements. ``@Boolean ifTrue: [^false]. ^true
%| `@Temps | ``@.Statements. ^``@Boolean not
%``@object not ifTrue: ``@block
%``@object ifFalse: ``@block.
%]]]
%
%[[[lineNumber=true
%RBParseTreeRewriter new
% 	replace: '``@aDictionary at: ``@key
% 		ifAbsent:
% 			[| `@Temps |
% 			``@.Statements.
% 			``@aDictionary at: ``@key put: ``@value]' with: '``@aDictionary at: ``@key
% 		ifAbsentPut:
% 			[| `@Temps |
% 			``@.Statements.
% 			``@value]';
%	yourself
%]]]
%
%[[[lineNumber=true
%rule := RBUnderscoreAssignmentRule new.
%environment := BrowserEnvironment new forPackageNames: #('PackageA'
%'PackageB' ...).
%SmalllintChecker runRule: rule onEnvironment: environment.
%rule open
%]]]
%
%[[[lineNumber=true
%ORLintBrowser
%	openRule: (RBCompositeLintRule rules: (RBCompositeLintRule
%rulesGroupedFor: RBSpellingRule) name: 'Spelling')
%	environment: (BrowserEnvironment new forPackageNames: #('Kernel'
%'Collections-Abstract'))
%]]]
