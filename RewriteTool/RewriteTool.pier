!Rewrite Tool

'''TODO: layout figures/sections; dev documentation: architecture, etc.; change
option naming (as list, recurse into)'''

The purpose of this chapter is to explain what is Rewrite Tool, why do we need
it and how to use it properly. It also helps to understand better how Rewrite
Tool works. Inasmuch it uses rewrite engine, its general concepts are
described. This engine, which is really powerful and very useful, is used by
Pharo to match and transform expressions or methods.  Often we encounter a
situation when we want to transform some part of code in a lot of different
places into another code.  For example, if you want to change 

[[[ label = matchExample | language = Smalltalk
    self isNil ifTrue: [ ^ true ] 
]]]
to next code:
[[[ label = transformExample | language = Smalltalk
    self ifNil: [ ^ true ]
]]]
in each and every method of your package.  It may take a lot of time and nerves
to manage this manually. However, you can use rewrite engine to transform all
of your methods in the way you want, if only you know how. The syntax of
rewrite engine is not that straightforward, thus to create specific matching
and transforming rules with it you will have to spend some time. Moreover, even
if you know engine syntax perfectly, it is very easy to miss a dot or misspell
some part of rewrite expression. As you may have guessed, Rewrite Tool helps us
to solve such a problem. It provides a GUI which allows user to create rewrite
rules without knowledge of rewrite engine syntax. After rule is created you may
simply apply it to scope that you want: packages, classes, methods.

In this chapter, we describe the tool itself in general. Then, we will take a
look at examples that will show you Rewrite Tool at work. After that, we will
go in more details about tool and how it works.

!! Getting started

To begin, you need to retrieve the RewriteTool which is a part of PharoExtra on
Smalltalkhub. In order to do this, add and configure the repository in your
Monticello browser as following:

[[[
MCHttpRepository
	location: 'http://smalltalkhub.com/mc/PharoExtras/RewriteTool/main'
	user: ''
	password: ''
]]]

If you are more comfortable with Gofer, an alternative way to retrieve and load
the RewriteTool is to enter the following code:

[[[
Gofer new
  url: 'http://smalltalkhub.com/mc/PharoExtras/RewriteTool/main'
  configuration;
  load.
ConfigurationOfRewriteTool loadDevelopment
]]]


!!Introduction

Rewrite Tool includes two parts. First is a rewrite rule builder (in the rest of this chapter it is referenced as ''Builder''), which, obviously, lets user create (build) rewrite rules.
And second part is rewrite rule browser(next as ''"Browser"''), in which user can select previously created rule and apply it to specific scope.

!!!Rewrite rule builder


The builder can be launched by typing the following code in your Pharo
workspace:

[[[
RewriteRuleBuilder new openWithSpec.
]]]

As illustrated in figure *rewriteRuleBuilder*, builder has four panes and three
buttons, and each of this items has its own functions.  It provides a
possibility, with simple GUI, to build rewrite rules dynamically.

+Rewrite rule builder>file://figures/rewriteRuleBuilder.png|label=rewriteRuleBuilder+

""Panes""

''TODO: rename panes labels when it will be done in the software''

-Top left pane, labeled ''"Source expression"'', contains source code of expression which will be matched and then transformed. It means, that you should input in this pane whatever you want to transform into something else. Next it is called as ''Source pane''.

-Bottom left pane with label ''"Match rule"'', is your playground. Here you will create matching part — the pattern — of rewrite rule. You can change the pattern either using action-click menu or manually changing the code. Later it is referenced as ''Match pane''.

-Bottom right pane is pretty much the same as previous one. Here you have label
''"Transform rule"''. It is a second part of rewrite rule. In this pane you can
create the action of the transformation rule also with options in action-click
menu, or just manually typing code. Similar to previous one it is called in rest of chapter ''Transform pane''.

-The last one, but not the least important, is top right pane - ''"Result
expression"''. It displays the result of applying a rewrite rule, composed of
the two bottom panes, to a source expression. You should note that this pane is
the only one that is not editable, so it is read only. Later, this pane is referenced as ''Result pane''.

""Buttons""

- "Undo" button is a general undo for the three editable panes: Source, Match
  and Transform. All changes, that were made in one of these panes, are
  stacked. If you click on "Undo" button, the last change that was made in any
  of these panes, will be reverted. Also there is local undo for each pane
  separately.
- "Generate rule" button creates new class which is a subclass of
  ''RBTransformationRule'' using information from two bottom panes. After the
  rule is created using this button, you can apply it to specific scope.
- "Browse rules" button opens up "Rewrite rule browser", which allows you to
  browse created rules, and apply them to scope that you want.

!!!Rewrite rule browser

The browser can be launched by typing the following code in your Pharo
workspace:
[[[
RewriteRuleBrowser new openWithSpec.
]]]

The browser is shown on figure *rewriteRuleBrowser*. This tool contains all
previously created rewrite rules in most left pane. It also displays all
packages, classes, protocols and methods that are present in the current image.

You can select a rewrite rule that you want to apply. Then choose a scope,
which you want to be transformed with this rule and click "Apply rule to
selected scope" button. A multiple selection can be done by pressing ''Shift''
key while clicking on the first and the last package, class, protocol or
method. After applying a rule, a confirmation window which shows changes
appears. You can accept or cancel them.

To browse selected rewrite rule class, click "Browse selected rule" button.

+Rewrite rule browser>file://figures/rewriteRuleBrowser.png|label=rewriteRuleBrowser+

!!Examples

In this part you can find useful examples, that will help you to understand how to create your own rule using Builder.
Following examples are meant to teach you basics of using Builder.

!!!First example

Back to example, we would like to transform the following snippet of code:

[[[ label = matchExample | language = Smalltalk
    self isNil ifTrue: [ ^ true ] 
]]]

into:

[[[ label = transformExample | language = Smalltalk
    self ifNil: [ ^ true ]
]]]

!!!!Step 1:

First, you need to input template source code in Source pane of Builder. If you
launched the builder with the previously given line, the input code is the one
of our example. In all panes you get exactly the same code. If you want to
create your own rewrite rule, just type or copy-paste the code on which you
would like to apply a transformation in the Source pane. Be sure to save any
changes in the pane in order to have the right result.

To start with, look at status bar in Match pane. Obviously, for now it says "matches", as source code and match rule are equal.
This status bar will help you to create rule, that will really correspond to source code.
If it changes to "doesn't match", you probably should use "Undo" button, and rethink your next move.
As was mentioned earlier, your main playground is Match pane.
Thus, almost all next actions are made in this pane, and also in Transform pane.
In our example we don't care about the concerned object (''self'').
It can be ''self'' or maybe just some temporary variable.
That is why you have to select ''self'' and right click on it, which opens a
menu.

+Step 1 of simple example>file://figures/simpleExample1-1.png|width=60|label=simpleExample1-1+
As shown in figure *simpleExample1-1*, it displays all actions that can be
applied to selected object. Actually this object is represented as a node of
an AST (abstract syntax tree). In Builder each node of AST has its own set of
options we will note detail here. For more information on abstract syntax tree
''""you may read HERE""''.
In this particular case it will contain following options:
- Ignore
- Change
- Abstract variable 
You need ''"Abstract variable"'', inasmuch it changes ''self'' into
metavariable, as illustrated in figure *simpleExample1-2*.
+End of step 1 of simple example>file://figures/simpleExample1-2.png|width=60|label=simpleExample1-2+

You can read more about metavariables and rewrite engine ''""HERE""''.

This metavariable will match any object for example: ''self'', ''Color'' (classes are objects too), ''someTempVar''.
After this change we should have:

[[[ label = matchExampleStep1 | language = Smalltalk
    `variable1 isNil ifTrue: [ ^ true ] 
]]]

And status bar also has to be unchanged, saying: ''matches''.
As you may noticed Transform pane text also was changed in following way:

[[[ label = transformExampleStep1 | language = Smalltalk
    `variable1 ifNil: [ ^ true ]
]]]

It means that in result on the place of ''self'' we will get ''self''.
In case you want to have in result something else, for example
''anotherObject'' use an option ''Change'' on a `variable1 in Transform pane
(or manually type it, but it is not recommended).
But for now, we don't want that.


!!!!Step 2:
+Step 2 of simple example>file://figures/simpleExample1-3.png|width=60|label=simpleExample1-3+

The next step concerns ''isNil'': select it in Transform pane and right-click
to open a menu. The options in this case are different from previous one, as it
is not a variable selected, but selector. So, click on ''Ignore selector''
option. It will remove ''isNil'' from Transform pane.
Also, Result pane was updated.%:

%[[[ label = resultExampleStep1 | language = Smalltalk
%    self ifTrue: [ ^ true ]
%]]]

!!!!Step 3:

+Step 3 of simple example>file://figures/simpleExample1-4.png|width=60|label=simpleExample1-4+

Now let us work with our block: ''[ ^ true ]''. We have the same situation as
we had with ''self''. Once again, we don't care about which block is passed as
an argument to ''ifTrue:'' or ''ifNil:''. Therefore in Match pane, we select
our block (be sure to include the brackets) and choose the option ''Abstract
block'' as examplefied in figure *simpleExample1-4*. In result it will be
changed into ''`@block1''.

!!!!Step 4:

+Step 4 of simple example>file://figures/simpleExample1-5.png|width=60|label=simpleExample1-5+

Finally, select ''ifTrue:'' in Transform pane, and apply ''Change selector''
option from menu. Type in recently opened window: ''ifNil:'', and press ''Ok''
button as shown by figure *simpleExample1-5*. 

You can also select ''super size'' and ignore it in Match and Transform panes,
and then delete it in the source one to finish the transformation and obtaining
the same rule as in *simpleExample1-6*.

+Step 5 of simple example>file://figures/simpleExample1-6.png|width=60|label=simpleExample1-6+

You can see the result of applying rewrite rule to source code in Result pane.

[[[ label = resultExampleStep2 | language = Smalltalk
    self ifNil: [ ^ true ]
]]]

You can click on ''Generate rule'' button to automatically generate a class for your new rule.
Than click on ''Browse rules'' button, and you will see that your new class is in Browser.

""...(HERE MAY BE DESCRIBED HOW TO USE BROWSER)...""


!!!Second example

To understand the following example, the previous one which transforms ''isNil
ifTrue:[ ... ]'' into ''ifNil[ ... ]'' has to be understood. If not, please
take your time and go back to be sure you know the basics.

This time we are going to recreate one of rules that already exists in Critic
Browser. We choose the one called ==RBMinMaxRule==. It has a method initialize
where all rules are initialized. There you can see that ==RBMinMaxRule== has
many rules that are similar to each other. Thus let us take a look only at one
of them. Suppose we have a snippet of code which returns the max of two objects
and which is written as follows:

[[[ label=secondExample1 | language = Smalltalk
    temp := a < b
	ifTrue: [ a ]
	ifFalse: [ b ]
]]]

where ''temp'' is a temporary variable. Let us suppose that the objects ''a''
and ''b'' are comparable, for instance integers.  This piece of code does
simple assignment of bigger number (''a'' or ''b'') to the temporary variable
''temp''. However it is written in a bad way.  We would rather write a simpler
and more beautiful snippet of code as illustrated in the following script:

[[[ label=secondExample2|language=Smalltalk
    temp := a max: b
]]]

This version is more readable and other people can easily understand what this code does.
In order to create a rule that will do the transformation as presented before, we will use our Builder.

!!!!Step 1:
First of all, launch the Builder and type this input code into Source and Match
panes (the left ones):

[[[ label = secondExample3 | language = Smalltalk
    temp := a < b
	ifTrue: [ a ]
	ifFalse: [ b ]
]]]

Then enter this code into the Transform pane (the bottom right one):

[[[ label = secondExample4 | language = Smalltalk
    temp := a max: b
]]]

+Step 1 of max transformation example>file://figures/example2-1.png|width=60|label=example2-1+

!!!!Step 2:
Now select ''temp'' in Match pane and mark it as an ''Abstract variable'' with
the contextual menu (right click). Apply the same operation on ''a'' and ''b''.
After this step, your Match panel should look like the following snippet of
code:

[[[ label = secondExample5 | language = Smalltalk
    `variable1 := `variable2 < `variable3
	ifTrue: [ `variable2 ]
	ifFalse: [ `variable3 ]
]]]

""Note:"" Variable names may be different if you did other changes before
trying this example.

As for the Transform panel, it should be very similar to the following code:

[[[ label = secondExample6 | language = Smalltalk
    `variable1 := `variable2 max: `variable3
]]]
If you want to match and transform only expressions where ''a'' and ''b'' are
simple variables, this rule is sufficient. 

+Step 2 of max transformation example>file://figures/example2-2.png|width=60|label=example2-2+

!!!!Step 3:
However if you need something more complex, for instance ''a'' is some
expression that does calculations and that returns a result, you will have to
go on with the example.  Select ''`variable2'' and mark it as ''As list'' with
the contextual menu. Then apply ''Recurse into'' on ''`@variable2'' which
results in the following snippet of code in Match panel:

[[[ label = secondExample7 | language = Smalltalk
  `variable1 := ``@variable2 < `variable3
	ifTrue: [ ``@variable2 ]
	ifFalse: [ `variable3 ]
]]]

And in the Transform panel:

[[[ label = secondExample8 | language = Smalltalk
    `variable1 := ``@variable2 max: `variable3
]]]

If necessary, you can do exactly the same thing with ''b'' (''`variable3'' in
the previous snippet). After few simple actions we got the result which we
expected.

+Step 3 (a) of max transformation example>file://figures/example2-3a.png|width=60|label=example2-3a+
+Step 3 (b) of max transformation example>file://figures/example2-3b.png|width=60|label=example2-3b+

!!!!Step 4:
Use ''Generate rule'' button to generate the class of this rule in order to use
it in the Browser.


!!!Third example

""...Probably we have to put explanation to rewrite engine before examples, or just give some link...""

Class ==RBMinMaxRule== is a subclass of ==RBTransformationRule==, which has other not less interesting examples of rewrite rules. 
That is why we will examine ==RBAtIfAbsentRule==. 
This one works with collections and blocks, so its implementation may be more complicated than implementation of rules in two previous examples,
 however it is still easy to understand. 

Again, open ==RBAtIfAbsentRule>>#initialize== method, and you will see few, similar to each other, rules. 
Here is one of them:

[[[ label=thirdExample1 | language = Smalltalk
    self rewriteRule
	"..."
	replace: '``@dictionary at: ``@key
		  ifAbsent: [| `@temps |
	          ``@.Statements.
	          ``@dictionary at: ``@key 
                  put: ``@object]'
	with:    '``@dictionary at: ``@key
	          ifAbsentPut: [| `@temps |
	          ``@.Statements.
	          ``@object]'
]]]

At first look it may seem too complex, but after we generate it with builder, you will clearly know the responsibilities of each part of this rule.
With such a rule we can do followning transformation:

[[[ label=thirdExample2 | language = Smalltalk
    	"before rule is applied"

	| myDictionary |
	myDictionary := Dictionary new 
		at: 1 put: 'a';
		at: 2 put: 'b';
		yourself.
	myDictionary at: 3 ifAbsent: [
	 | temp1 temp2 temp3 | 
	 temp1 := 'c'.
	 temp2 := 'd'.
	 temp3 := temp1, temp2.
	 myDictionary at: 3 put: temp3 ].
	 ^ myDictionary

	"after rule is applied"

	| myDictionary |
	myDictionary := Dictionary new
		at: 1 put: 'a';
		at: 2 put: 'b';
		yourself.
	myDictionary at: 3 ifAbsentPut: [ 
	 | temp1 temp2 temp3 |
	 temp1 := 'c'.
	 temp2 := 'd'.
	 temp3 := temp1 , temp2.
	 temp3 ].
	^ myDictionary
]]]

This code contains all keywords that are present in rule such as: #at:ifAbsent:, and #at:ifAbsentPut:. 
Current example is using this code, to implement the rule, that we selected earlier.

!!!!Step 1:

In order to open Builder with previous code inside of it, select first part of code (the one that is before rule is applied)
 in Nautilus workspace, go to ''Source code refactoring'' and select ''RewriteRuleBuilder'' option. 
Or you can just open Builder through ''World menu >> Tools >> Builder'',
 and than copy and paste first part of code in Source and Match panels, and second part - in Transform panel.
Next copy second part of code, and paste it into Transform panel. 
Now we are ready to implement the rule.

+Step 1 of ifAbsent: transformation example>file://figures/example3-1.png|width=60|label=example3-1+

!!!!Step 2:
Required code is inside of the Builder, so it is time to begin creating the rule.
As always, all following actions are done in Match panel, unless other panel is specified. 
To start with, select any reference of ==myDictionary==, except one that is a variable declaration,
 and apply ''Abstract variable'' option. 
After that, do ''As List'' on newely created metavariable ==`variable1==. 
You will get ==`@variabl1==, and finally, apply ''Recurse into'' to this one.
The result is ==``@variable1==, and all in all it is: 

Despite tha fact, that we don't need recursion and list symbol in this particular situation, 
we still use them, because of next reasons:
- to get exactly the same rule as we have in ==RBAtIfAbsentRule==;
- to create a rule that can be used in general situation, not only in particular one;
- to learn which actions Builder is able to perform.

Now we do exactly the same actions with a key, which is equal to 3.

+Step 2 of ifAbsent: transformation example>file://figures/example3-2.png|width=60|label=example3-2+

!!!!Step 3:

Apply ''Abstract statement'' action to next snippet:

[[[ label=thirdExample3 | language = Smalltalk
    	"..."

	``@variable1 := Dictionary new
	at: 1 put: 'a';
	at: 2 put: 'b';
	yourself.

	"..."
]]]

Basically, we want to match here pretty much everything, so let's do ''As List'' and ''Recurse into'' on ==`.Statement1==, and as a result we have ==``@.Statement1==.
To finish with initialization part of this code, select declaration of temporary variable ==| myDictionary |== and do on it ''Abstract temporaries list''.
Note, that ==| myDictionary |== in Transform panel wasn't transformed to ==| ``@temporaries |==, so we have to do it ourselves. 
Select ==| myDictionary |== in Transform panel, and apply ''Abstract temporaries list''. 
In opened window select ==| ``@temporaries |== option.

!!!!Step 4:

After this steps, lets take a look at the argument of ==#ifAbsent:== - a block. 
With temporaries declaration ==| temp1 temp2 temp3 |== we do exactly the same thing as in previous step. 
Also we have to do same actions in Transform panel, but now in opened window choose ==| ``@temporaries2 |== instead of ==| ``@temporaries1 |==. 

Apply ''Abstract statement""s""'' action to next snippet:

[[[ label=thirdExample4 | language = Smalltalk
    	"..."

	temp1 := 'c'.
	temp2 := 'd'.
	temp3 := temp1 , temp2.

	"..."
]]]

Than do it with same snippet in Transform panel, and choose ==`@.Statements2==. 
Next, back to Match panel, on ==`@.Statements2== node do ''Recurse into''. 
The rule is almost ready, there is one variable left that we have to change - ==temp3==. 
Select it and use ''Abstract variable'', ''As List'' and ''Recurse into'' actions one after another, and that is how you get ==``@variable3==. 
Finally we have our rule, which does exactly what we wanted - transformation that is mentioned in the beginning of this example. 

+Step 4 of ifAbsent: transformation example>file://figures/example3-4.png|width=60|label=example3-4+

If you wish, now it is possible to ''Generate'' a class, that will hold this rule, so afterwars you can use it in Browser. 

""... Again, maybe explained Browser ...""


!!Rewrite Tool in details

In this section we describe each and every part of rewrite tool. It is grounded
on many important ideas that are explained here. A good understanding of this
ideas is crucial to increase users effectiveness, while working with the tool.

!!!Menu options

List of all available options (may be changed):
- Abstract block
- Abstract condition
- Abstract literal
- Abstract statement
- Abstract variable
- As list
- Recurse into
- Change
- Change selector
- Ignore
- Ignore selector
- Undo on node

""... Update list of options ...""

!!!!""Abstract actions""

Any of abstract action replaces selected object(s) with metavariable that
corresponds to selected node of AST. Next is described what can be matched with
the metavariable in each case.

""Note:"" each metavariable name ends with an index, but for readability
reasons it is not displayed in the examples below.

''""Abstract block""''

Matches any block.

[[[ label = blockExample | language = Smalltalk
    [ "a lot of stuff here" ] "replaced with" `@block
]]]


''""Abstract condition""''

Matches any condition.

[[[ label = conditionExample | language = Smalltalk
    self isNil ifTrue: [ ^ true ] "is replaced with" `@condition ifTrue: [ ^ true ]
]]]

''""Abstract literal""''

Matches any literal.

[[[ label = literalExample | language = Smalltalk
    true "is replaced with" `#literal
    119 "is replaced with" `#literal
]]]

''""Abstract statement""''

Matches any statement, but not list of statements.

[[[ label = statementExample | language = Smalltalk
    self isNil ifTrue: [ ^ true ] "is replaced with" `.Statement
]]]

''""Abstract variable""''

Matches any variable.

[[[ label = variableExample | language = Smalltalk
    self "is replaced with" `variable
]]]

!!!!""Other actions""

''""As list""''

Metavariable represented as list matches practically anything.


[[[ label = asListExample | language = Smalltalk
    `variable "is replaced with" `@variable
]]]


''""Recurse into""''

Expression ''`@variable size'' matches ''self size size'' once, where ''`@variable'' is ''self size''.
But recursive metavariable in expression ''``@variable size'' matches ''self size size'' twice.
First time ''``@variable'' is ''self size'' and second time it is ''self''.


[[[ label = asListExample | language = Smalltalk
    `@variable "is replaced with" ``@variable
]]]


''""Change""''

Replaces selected node of AST with users input. Contrary to a manual change,
all occurences are modified in the different panes.

''""Change selector""''

Replaces selector of selected node of AST with users input.

''""Ignore""''

Removes selected node of AST. This option is used when a part of the code is
not useful or relevant for the pattern.

''""Ignore selector""''

Removes selector of selected node of AST.

''""Undo on node""''

Sets selected node of AST in previous state.


[[[ label = undoOnNodeExample | language = Smalltalk
    self "Abstract variable =>" `variable
    `variable "Undo on node =>" self
]]]

!!!Working with rewrite rules

This section provides useful tips about working in rewrite rule builder.
It will help you to understand the mechanics of building rule with ''Rewrite tool''.

!!!!""Equal nodes""

First thing worth mentioning is that any action, except ''Ignore'' actions, applied in ''Match rule'' pane,
also applies to all same object in ''Match rule'' pane and ''Transform rule'' pane.
If it is applied in ''Transform rule'' pane, only objects in it are transformed, but not in ''Match rule'' pane.
When I say "same object", it means equal nodes of AST.
Example:

[[[ label = tipsExample1 | language = Smalltalk
    "Code below is useless - just an example"

    "Match rule pane:"
    self children do: [ :each | each check ].
    self ifNotNil: [ self children last remove ].
    ^ self size
    
    "Transform rule pane:"
    self children do: [ :each | each check ].
    self ifNotNil: [ self children last remove ].
    ^ super size
]]]

Select ''self'' in ''Match rule'' pane and apply ''Abstract variable'' action.
You will, see the next result:

[[[ label = tipsExample2 | language = Smalltalk
    "Code below is useless - just an example"

    "Match rule pane:"
    `variable1 children do: [ :each | each check ].
    `variable1 ifNotNil: [ `variable1 children last remove ].
    ^ `variable1 size
    
    "Transform rule pane:"
    `variable1 children do: [ :each | each check ].
    `variable1 ifNotNil: [ `variable1 children last remove ].
    ^ super size
]]]
Create new metavariable

!!!!""Non-existing metavariables""

Another thing, that you shuld know is that you can't create new metavariable in
''Transform rule'' pane, if it is not created in ''Match rule'' pane. Meaning,
that you are not able to apply, for example, ''Abstract block'' action in
''Transform rule'' pane, if there is no metavariable in ''Match rule'' pane.
If there is one, system will suggest you to choose name from existing
metavariables. Let us take previous example:

[[[ label = tipsExample1 | language = Smalltalk
    "Code below is useless - just an example"

    "Match rule pane:"
    self children do: [ :each | each check ].
    self ifNotNil: [ self children last remove ].
    ^ self size
    
    "Transform rule pane:"
    self children do: [ :each | each check ].
    self ifNotNil: [ self children last remove ].
    ^ super size
]]]

In case you select ''super'' in ''Transform rule'' pane and apply ''Abstract variable'' action, an error will be raised.
But if you previously done this process in ''Match rule'' pane with ''self'' variable,
it is possible now to create metavariables in ''Transform rule'' pane.
If you now select ''super'' in  ''Transform rule'' pane and apply ''Abstract variable'' action window will be displayed.
With other actions like ''Abstract literal'', ''Abstract condition'' etc. happens exactly the same thing.

!!!!""Manual editing""

One more important thing is that creating rewrite rules with manual editing, instead of action click menu options, is not recommended.
First of all, you will not have general ''Undo'' as well as ''Undo on node'' options available.
Moreover you may make mistake in rewrite engine syntax.
And also, it is possible to get errors from, for example, creating non-existing metavariables.
To sum up, rewrite rule builder allows you to edit rules, but do it only if really necessary.

"IN DEVELOPEMENT!"

!!!Details of rewrite rule browser

[[[ label = nothing | language = Smalltalk
    "Nothing here for now"
]]]

"IN DEVELOPEMENT!"

!!!Rewrite engine

Builder uses rewrite engine to parse rules, to match and transform code. This engine works with strings, that are recognized on level of abstract syntax tree.
As a result, each part of matching or transforming string becomes a node of AST, which makes this engine very powerful.
So, rewrite engine makes it possible to get an AST representation of any rule.
It means, user can easily match or replace(transform) any part of code as a node.

The syntax of rewrite engine may seem a bit confusing, however it contains only few key symbols.
These symbols are:
-backquote(`)
-dot(.)
-number sign(#)
-at sign(@)

!!!!Backquote symbol
[[[
`
]]]
It represents any metavariable, and other symbols specify whic kind of metavariable it is.
For example, it can be
[[[
`variable1
]]]
This expression will match any simple object like: Object, super, etc. (but not literal)
Up to this point it seems to be simple, however, there is one tricky place.
[[[
`variable1
"Some code"
`variable2
]]]
This expression will not match
[[[
myVar
"Some code"
myVar
]]]
because we use different metavariables and equal variables.
But it will match
[[[
myVar
"Some code"
myAnotherVar
]]]
It means, that name of metavariable is important, as it is unique.
Each metavariable has it's own AST node representation.
Conclusion is, that different metavariables match different variables.
And one metavariable matches the same variable many times.

Also backquote symbol is responsible for recursing into message sends, statements, objects etc.
[[[
``@variable1 size
]]]
This rule will match any object that has a sender size.
Moreover, whenever match is found, rewrite engine looks inside of matched node for more matches.
It means that engine will search for this construction
[[[
``@variable1 size
]]]
inside of this node:
[[[
``@variable1
]]]
So, if you have 
[[[
self size size
]]]
you will get two matches. First of all, 
[[[
``@variable1
]]]
matches with reciever of size:
[[[
self size
]]]
And than, our metavariable matches with
[[[
self
]]]

!!!!Dot symbol
[[[
.
]]]
It has the simplest role in rewrite engine.
Dot is used to match statement in sequence node.
[[[
`.Statement1
]]]
matches with
[[[
myVar asString size
]]]
Obviously, it is also used as end of statement.
Working with rewrite engine syntax requires a lot of attention and patience, as if you miss dot somewhere, 
it will match nothing or something you didn't want to.
In case you are using builder, it will automatically place all dots you need.
If you have couple of statements like this:
[[[
myVar := 123.
myVar asString size.
]]]
it matches next rewrite engine expression:
[[[
`.Statement1.
`.Statement2
]]]
As was mentioned earlier, backquote states that it is metavariable, and unique name of each metavariable indicates that matched AST nodes are different.

!!!!Number sign
[[[
#
]]]
This symbol says that metavariable should match only literal nodes of AST.
Example:
[[[
`#literal1
]]]
mathces any literal:
[[[
#(1, 2, 3) "or" #foo "or" 19 "etc."
]]]

!!!!At symbol
Finally, we will examine functions of at sign:
[[[
@
]]]

At sign, as an element of rewrite engine syntax, is used to indicate list of something: temporary variables, statements, arguments or keywords in message send.
To match any message send you have to specify any number of keywords and any number of arguments like this:
[[[
myObject `@message: `@keyword
]]]
matches any message sent to myObject.
If you want to match more than one statement which are one after another it's not necessary to write:
[[[
`.Statement1.
`.Statement2.
`.Statement3.
"etc."
]]]
Instead use at sign together with dot symbol, and you will get equal to previous expression:
[[[
`@.Statements
]]]
Also, it's possible to match list of temps this way:
[[[
| `@temporaries |
]]]
In general, at symbol used with backquote
[[[
`@object
]]]
matches any message, literal or block node of AST, which is really important to know.

!!Architecture of Rewrite Tool

This section covers the architecture of Rewrite Tool, explains responsibilities of classes.
Also it gives a clear understanding of class hierarchy, which is present in Rewrite Tool. 
In addition to this, methods are covered too.

!!!AbstractPanel class

Clearly, ''AbstractPanel'' is an abstract class,
which represents a panel that contains text field and a label.
Text field contains a code, which is considered later as an AST in order to make further manipulations with code possible.
Also in ''AbstractPanel'' class is implemented basic behavior of all actions,
that were described in paragraph ""4.1. Menu options"".
Why "basic behavior", you might ask?
That is so, because each of ''AbstractPanel'' subclasses shares this behavior, however its not complete in the abstract class.
Its subclasses represent four panels of builder and they are: ''SourcePanel'', ''MatchPanel'', ''TransformPanel'', ''ResultPanel'',
which were mentioned in ""2.1. Rewrite rule builder"" section.
Moreover ''AbstractPanel'' class implements update methods, which, obviously, update different information such as AST, text, current metavariables names etc.

Methods of ''AbstractPanel'' class:

1. ""==#parse:=="" parses a string as rewrite expression or method. This choise depends on return of ==#isParsingExpression==. 

2. ""==#executeCommand:atIndex:withSource:=="" is used to execute any command, class of which is passed as an argument.
This particular command is executed for each node that is equal to currently selected node.
Also, this method adds changes to undo dictionary, that holds all previous changes that were made.
After command is executed, update methods are invoked.

3. ""==#updateAst=="" updates AST of current panel.

4. ""==#updateText=="" updates text of current panel, that is displayed.

5. ""==#updateInfoFor:withOld:andNew:=="" updates text, ast of panel. 
Also updates ==#oldNodes== property of all nodes in AST.
Invokes method, which responsibility is to update next panel. 
Next panel is Transform Panel for Match Panel, and Result Panel for Transform Panel. 

6. ""==#getAllMetavariables=="" returns a collection of all metavariables that are used in current panel.

7. ""==#difference:with:=="" returns a mathematical difference of sets, however works not with sets but with collections, so duplicates are possible. 

8. ""==#isReplacementPossibleFor:=="" checks a complicated condition. If it returns true, than execution of current action is permited, else it is restricted. 
The condition is: 

[[[
"if after action is applied to selected (meta)variable, there still will be the same (meta)variable left in ''MatchPanel''"
	((self difference: allMetavars with: selectedMetavars) & selectedMetavars) size == selectedMetavars size
		and: [ 

"if selected (meta)variable is used in ''TransformPanel'' or: if there are no metavars in ''MatchPanel'' and ''TransformPanel'' at all"
			((selectedMetavars & usedMetavars) isNotEmpty or: [ (selectedMetavars | usedMetavars) isEmpty ])

"if among selected variables there are no metavariables"
				or: [ selectedMetavars isEmpty ] ]
]]]

9. ""==#isSelectedAll=="" returns ==true== if all code in current panel is selected. 

10. ""==#manageUndoDictFor:=="" adds an instance of RewriteRuleChange class to ==undoDict== instance variable, which holds all changes for ''Undo'' action. 
This variable is discussed later. Also this method enables ==undoButton==. 

All following methods open up alert windows with different message each.

==#changeInvalidAlert==, ==#classNotCreatedAlert==, ==#noMetavariablesAlert==, ==#replacementNotPossibleAlert==, ==#varNotChosenAlert==. 

Next, we may examine subclasses of ''AbstractPanel''.

!!!SourcePanel class

Holds source code of expression that should be transformed into something new.
Actually, ''SourcePanel'' implements onle one new feature that is not inherited from ''AbstractPanel''.
This class states that by action-clicking (right click) there are available options in this panel - Smart Suggestions (by Gisela). 
It's done in method #menuActions, which returns an array. 

[[[
    menuActions
	| options |
	options := OrderedCollection new.
	options add: #('Smart Suggestions' #smartSuggestions).
	^ options
]]] 

To remind, instance of ''SourcePanel'' class is located on top left of builder.

!!!ResultPanel class

Presents disabled text field, which means that user can not edit text contained in this panel. 
Result Panel holds result of applying rewrite rule to source code.
Located in top right part of RewriteRuleBuilder. 

[[[
    initialize
	super initialize.
	self templateText disable
]]]

!!!MatchPanel class

''MatchPanel'' class is a subclass of ''AbstractPanel'', instance of which holds matching part of rewrite rule (i.e. left hand side part of rule). 
To begin with, this class coontrols all indexes that are added after each (including some of them) metavariable name. 
When any action is taken, that creates new metavariable in rule, ''MatchPanel'' adds index at the end of metavariable name. 
Than index of coresponding metavariable group is incremented. 
For example, ==MatchPanel >> #abstractVariable==

[[[
    abstractVariable
	"first the action is executed, thus new metavariable is created"
	super abstractVariable.
	"than index is incremented by one"
	self varIndex: self varIndex + 1
]]]

All other actions are implemented in similar way. 
Also ''MatchPanel'' has an instance variable ==varNames== which represents a collection of all metavariables that are currently present in rewrite rule. 
This variable helps to ensure, that transform part of rewrite rule (i.e. right hand side) uses only already existing metavariables. 
As use of non existing metavariables in right hand side of rewrite rule would lead to an error. 
More information about usage of ==varNames== instance variable is given in next section about ''TransformPanel'' class. 

Methods of ''MatchPanel'' class:

1. ""==#isReplaceAvailableFor:=="" returns a boolean, which says if it is possible to replace aNode (an argument of this method), 
or it should be reassigned.

2. ""==#addChanges=="" any action that changes AST of instance of ''MatchPanel'' class, 
is recorded into instance variable ==undoDict== of instance of ''TransformationRule'' class. 
Generally, ==undoDict== is a collection of all changes made with ''MatchPanel'' and/or ''TransformPanel''. 

3. ""==#updateVarNames=="" updates ==varNames== instance variable, so it holds only existing metavariables in ''MatchPanel''. 

4. ""==#updateTransformPanelFor:=="" does a pass on AST that is held by ''TransformPanel''. 
Replaces all nodes, that are equal to node that previous action in ''MatchPanel'' was applied, in ''TransformPanel'' with a new metavariable node. 
Than the displayed text and AST of ''TransformPanel'' are updated. 
For example, we have this code in ''MatchPanel'':

[[[
	super foo.
	`@variable1 doSomething
]]]

and following code in ''TransformPanel'':

[[[
	`@variable1 foo.
	`@variable1 bar
]]]

If user applies ''Recurse into'' action to ==`@variable1== in ''MatchPanel'', as a result ''TransformPanel'' will show next code:

[[[
	``@variable1 foo.
	``@variable1 bar
]]]

5. ""==#updateNextPanelForNode:=="" is invoked after the current panel is updated in method ==#updateInfoFor:withOld:andNew:==. 
First of all, this method updates ==varNames== instance variable. 
After this, ''TransformPanel'' itself is updated via ==#updateTransformPanelFor:== method. 
Than, ==statusBar== color and information text are updated. 
==statusBar== instance variable is explained later. 
In the end, ==#updateNextPanelForNode:== is invoked for ''TransformPanel'', so the ''ResultPanel'' is updated. 

!!!TransformPanel class

''TransformPanel'' class is a subclass of ''AbstractPanel'', instance of which holds transforming part of rewrite rule (i.e. right hand side part of rule). 
In ''TransformPanel'' not all options are available. For example, you can not ''Recurse into'',
 due to the fact that metavariable that you are about to create does not exist. 

Methods of ''TransformPanel'' class:

1. ""==#menuActions=="" removes all unavailable uptions from ''TransformPanel'' menu via ==#removeUnavailableOptions:== method. 

2. ""==#removeUnavailableOptions:=="" removes such options as ''As list'', ''Recurse into'' and ''Undo on node''. 

3. ""==#addOldNodes:=="" updating information about ==oldNodes== for each node in AST of ''TransformPanel''. 
==oldNodes== propery of AST holds all nodes that where replaced up to the current node. 

4. ""==#chooseMetavariablesForNode:=="" when user applies action such as ''Abstract variable'' in ''TransformPanel'' window is opened. 
In this window user can choose one of available metavariables to replace current node with it. 

5. ""==#chooseTempsForNode:=="" same as ==#chooseMetavariablesForNode:==, but is used when ''Abstract temporaries list'' action is invoked. 

6. ""==#updateNextPanelForNode:=="" applies rewrite rule from ''MatchPanel'' and ''TransformPanel'' to AST of ''SourcePanel''. 
As a result we have new AST. Code of this AST is displayed in ''ResultPanel''.

!!!TransformationRule class

''TransformationRule'' is model that represents bottom part of Builder. 
It contains ''MatchPanel'', ''TransformPanel'' all buttons (undo, redo, generate rule, browse rules). 
Plus it has ==undoDict== and ==redoDict== instance variables. 
This variables are collections of instances of ''RewriteRuleChange'' class. 
Each change, that is made in one of three editable panel of Builder is recorded in ==undoDict==. 
Obviously, ==undoDict== instance variable is used in implementation of ==#undo== action. 
When undoing a change, it is removed from ==undoDict== and added to ==redoDict==, which is used for implementation of ==#redo== action. 
For example, if code was edited in ''SourcePanel'' manually, than ''RewriteRuleChange'' is added to ==undoDict== as follows: 

[[[
	"obviously, transformationRule , sourcePanel andsourcePanel ast may be accessed some other way, but here it is not considered for easier explanation"

	transformationRule 
		undoDict add:
		(RewriteRuleChange new
		panel: sourcePanel asOrderedCollection;
		ast: (sourcePanel ast) asOrderedCollection;
		yourself)
]]]

Another example is, if user applies ''Abstract variable'' action to ==self== variable in next code in ''MatchPanel'': 

[[[
	self foo.
	^ self
]]]

when in ''TransformPanel'' we have:

[[[
	super bar.
	self doSomething.
	^ self
]]]

Than, as a result to ==undoDict== will be added following ''RewriteRuleChange'' instance:

[[[
	RewriteRuleChange new
	panel: { matchPanel. transformPanel } asOrderedCollection;
	ast: { matchPanel ast. transformPanel ast } asOrderedCollection;
	yourself	
]]]

To understand why we added two panel and two ast to ''RewriteRuleChange'', let us take a look at what has happened in Builder. 

[[[
	"MatchPanel code"
	`variable1 foo.
	^ `variable1

	"TransformPanel code"
	super bar.
	`variable1 doSomething.
	^ `variable1
]]]

As you see, both panels have changed at the same time, so this changes are considered as one. 
Thus, these changes are added to ==undoDict== as one. 

Methods of ''TransformationRule'' class: 

1. ""==#addChangeForPanel:=="" adds a change to ==undoDict==. 
Change is initialized with panel, passed to this method, and its AST. 

2. ""==#browseRules=="" opens up Browser. 

3. ""==#generateRewriteRuleClass=="" basically it generates new subclass of RBTransformationRule. 
This class is stored in a ''RewriteRulesCustom'' category. 
Also it has only one method - ==#initialize==. 
Code of this method is generated by ==#getRuleInitString== method, which is explained next. 
The name of class is specified by user, initially it is ''MyRule''. 

4. ""==#getRuleInitString=="" forms and returns a string, that is a code of ==#initialize== method of ''RBTransformationRule'' subclass. 

5. ""==#matchPanelChanged=="" is invoked when text in ''MatchPanel'' is accepted. 
First of all, it adds change made in ''MatchPanel'' to ==undoDict== and enables ==undoButton==. 
Also it updates AST and displayed text of ''MathcPanel''. 
Than it updates information related to ==statusBar== - color and text. 
==statusBar== is an instance variable of ''RewriteRuleBuilder'' class (or just Builder). 
In the end, the ''ResultPanel'' info is updated. 

6. ""==#transformPanelChanged=="" is similar to ==#matchPanelChanged== method, but does not update information about ==statusBar==. 
It is invoked when text in ''TransformPanel'' is accepted. 
First of all, it adds change made in ''TransformPanel'' to ==undoDict== and enables ==undoButton==. 
Also it updates AST and displayed text of ''MathcPanel''. 
In the end, the ''ResultPanel'' info is updated. 

7. ""==#undo=="" reverts last change made in either ''SourcePanel'', ''MatchPanel'' or ''TransformPanel'', and removes this change from ==undoDict==. 
Also it adds just undone change to ==redoDict==. 
Next it updates displayed text and AST for each panel where changes were reverted. 
Finally the ==#updateAfterUndoOrRedo== method is invoked. 

8. ""==#redo=="" does undone change again to each panel influenced by ==#undo==. 
Also it adds just redone change to ==undoDict==. 
Next it updates displayed text and AST for each panel where changes were reverted. 
Finally the ==#updateAfterUndoOrRedo== method is invoked. 

""Note:"" as we see from two previous methods, that ==#undo== and ==#redo== can be done infinit number of times. 

9. ""==#ruleLabel==""  is an instance of ''StringMorph'', that is displayed above ''MatchPanel'' and ''TransformPanel''.  

10. ""==#statusBarForRule=="" returns an arrow that is placed between ''MatchPanel'' and ''TransformPanel''. 

11. ""==#updateAfterUndoOrRedo=="" enables or disables undo and redo buttons. 
Also updates text and color for ==statusBar== instance variable of ''RewriteRuleBuilder''. 
In the end, ''ResultPanel'' code is updated, as rewrite rule may have changed. 

12. ""==updateUndoDictFor:=="" adds a change to ==undoDict==. 

13. ""==updateRedoDictFor:=="" adds a change to ==redoDict==. 

Class side:

14. ""==#arrowMorph:=="" is an instance of ''PolygonMorph'' or ''ActivePolygonMorph''. 
It is shaped in form of arrow. 

15. ""==#defaultSpec=="" creates a layout for all components. 

!!!RRTextModel class

''RRTextModel'' is a subclass of TextModel. It has some features that are needed for RewriteRuleBuilder, like AST and support of custom menu. 
Instances of ''RRTextModel'' are used in each of four panels: ''SourcePanel'', ''MatchPanel'', ''TransformPanel'', ''ResultPanel''. 
Each panel stores instance of this class in ==textModel== instance variable. 
==textModel== stores AST and gives acces to custom menu, which can be invoked by right clicking on panel. 

Methods of ''RRTextModel'' class:

1. ""==#actionsForSelection=="" performs ==#menuOptions== for panel that is storet in ==model== instance variable. 
==#menuOptionsSelector== fills right click menu with all available actions for selected node. 

2. ""==#getSelectedNode=="" returns node, which is currently selected in ==textModel==. 

3. ""==#codePaneMenu:shifted:=="" forms a menu due to ==#actionsForSelection== method. 

!!!RewriteRuleChange class

''RewriteRuleChange'' is class that holds changes that were made in Builder panels. 
Instances of this class are stored in collection - the instance variable ==undoDict== of ''TransformationRule''. 
The implementation of this class is very simple: it has only two instance variables - ==panel== and ==ast==. 
==panel== is one of four panels of Builder, and ==ast== is an AST of this panel. 

!!!ActivePolygonMorph class

''ActivePolygonMorph'' is a subclass of ''PolygonMorph'', that adds new functionality to ''PolygonMorph''. 
It recognizes two events: ==#mouseEnter:== and ==#mouseLeave:==. 
Also it has ==infoText== instance variable, which contains text information,
 that says if AST of ''SourcePanel'' matches left hand side rule part (AST of ''MatchPanel'') or not. 

Methods of ''ActivePolygonMorph'' class:

1. ""==#infoMorph=="" constructs morph, which is a ''BorderedMorph'' with ''StringMorph'' submorph. 
Contents of ''StringMorph'' is assigned to ==infoText== instance variable, that is described before. 

2. ""==#mouseEnter:=="" adds to self a submorph, that was created in ==#infoMorph== method. 

3. ""==#mouseLeave:=="" removes from self a submorph, that was created in ==#infoMorph== method. 

4. ""==#handlesMouseOver:=="" states that ''ActivePolygonMorph'' handles mouse over events, as it returns ==true==. 

!!!RewriteRuleBuilder class

Is a class that represents a Builder as one complete object. 
''RewriteRuleBuilder'' contains ''SourcePanel'', ''ResultPanel'' and the most important part of Builder instance of ''TransformationRule'' class. 
This class is responsible for GUI and layouting all elements of Builder. 
Also it holds labels that are displayed in Builder. 

==statusBar== instance variable is an ''ActivePolygonMorph'' that shows if AST of ''SourcePanel'' matches AST of ''MatchPanel''. 
Firstly, its color is green or red, which, clearly, depends on matching. 
This color is returned by ==#matchColor== method. 
Secondly, when mouse is over it, the ''StringMorph'' shows up with text from ==#matchLabel==. 

Methods of ''RewriteRuleBuilder'' class:

1. ""==#matchLabel=="" returns a string that says if AST of ''SourcePanel'' matches AST of ''MatchPanel'' or not. 

2. ""==#resultLabel=="" returns an information string for indicating a ''ResultPanel''. 

3. ""==#rules=="" is a collection of all subclasses of ''RBTransformationRule'' class. 

4. ""==#matchColor=="" returns green or red color for ==statusBar==. 

5. ""==#sourcePanelChanged=="" is invoked when text is accepted in ''SourcePanel''. 
It adds a change, that was made and accepted, to ==undoDict== and enables undo button. 
Also updates displayed text and AST of ''SourcePanel''. 
After that, it assigns right color and text to ==statusBar== properies. 
Finally, this method updates code of ''ResultPanel''. 

6. ""==#code:=="" assigns a string to ==code== of each panel in Builder. 

7. ""==#statusBarForMatch=="" is a method used to initialize ==statusBar== instance variable. 
Basically, it returns an instance of ''ActivePolygonMorph'' ==#asSpecAdapter==, so it can be used in GUI built with Spec. 

8. ""==#statusBarForResult=="" returns an instance of ''ActivePolygonMorph'' ==#asSpecAdapter==. 
This morph is used to indicate ''ResultPanel''. 
When mouse is over, shows a label with ==#resultLabel== text. 

9. ""==#isMatching=="" returns a boolean, that is ==true== when AST of ''SourcePanel'' matches AST of ''MatchPanel'', and ==false== when it does not. 

Class side: 

10. ""==#withCode:=="" creates an instance of ''RewriteRuleBuilder''. 
Each panel ==code== is initiialized with a string that is passed as an argument. 

11. ""==#defaultSpec=="" creates a layout for all components. 

12. ""==#menuCommandOn:=="" adds Builder to a world menu under ''Tools'' tab. 

13. ""==#shiftedSourceCodeMenu:=="" adds Builder to a Nautilus context menu under ''Source code refactoring'' tab. 
Each panel ==code== instance variable in Builder is initialized with selected code in Nautilus. 

!!!Command class

A ''Command'' abstract class and its subclasses are implemented similar to Command pattern. 
However there are differences between this implementation and conventional one. 
Despite this fact, ''Command'' class has instance variable ==commandReceiver== which is a reciever of action that should be performed. 
==commandReceiver== is a node of AST of panel. 
Another important element of ''Command'' class is ==#execute== method. 
It is a generic method that is hard-coded for each subclass of ''Command'' class. 
Therefore for each action in Command pattern there is implemented one specific subclass of ''Command'' class with its own ==#execute== method. 
==panel== instance variable presents ''MatchPanel'' or ''TransformPanel''. 
It depends on to which panel ==commandReceiver== belongs. 

Methods of ''Command'' class: 

1. ""==#execute=="" is responsible for executing an action. 
Each subclass must implement this method. 

2. ""==#change:For:=="" replaces first argument for second. Both arguments are nodes of AST. 
So for replacement this method uses either assignement or ==#replaceWith:== method. 

3. ""==#changeCommandReceiverFor:=="" uses ==#change:For:== method with a first argument ==commandReceiver==. 

Class side: 

4. ""==#receiver:panel:index:withSource:=="" creates new instance of ''Command'' class initialized using arguments. 

5. ""==#isAccepted:=="" returns ==true==, explained in subclasses. 

6. ""==#isSequenceNeeded=="" returns ==false==, explained in subclasses. 

!!!AbstractCommand class 

''AbstractCommand'' class implements common functionality for actions (commands) which, 
in result, create new metavariable. 

Methods of ''AbstractCommand'' class: 

1. ""==#abstractName=="" is a name of metavariable, that may be created with specific command. 
Each subclass must implement this method. 

2. ""==#length=="" returns length of metavariable name, that may be created with specific command. 

3. ""==#abstractWithName:andIndex:=="" creates metavariable named ==#abstractName==. 
Than replaces ==commandReceiver== with this metavariable.

Each subclass of this class implements ""==#execute=="" method almos identically to each other. 

[[[
	execute
		^ self abstractWithName: self abstractName andIndex: self panel "someIndex"
]]]

Basically, it invokes ==#abstractWithName:andIndex:== method, and as arguments passes: 
1) its ==#abstractName==;
2) index of specific metavariable type (it may be block, variable, statement, etc.)

!!!AbstractBlockCommand class

''AbstractBlockCommand'', as a subclass of  ''AbstractCommand '' class, 
implements ""==#abstractName=="" method. 
It returns =='`@block'==, which matches any block when used by rewrite engine. 

Obviously, it also has an ""==#execute=="" method, 
that is implemented similarly in each subclass of ''AbstractBlockCommand'' class. 
It is described in ''AbstractBlockCommand'' class. 

!!!AbstractConditionCommand class




