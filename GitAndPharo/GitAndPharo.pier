!Git And Pharo

todo Sept 2014: add some pictures and should ask thierry to finish it :)

In the future Pharo sources will be managed with Git. Howvever it takes time to arrive to a solution 
that be used without too much extra knowledge of Git. Now if you want to take advantage of Git to manage
your development, this chapter written by Thierry Goubier is about how to integrate Pharo with Git, the distributed 
version control system. Integration with not only git, but possibly others: mercurial, svn, cvs, etc... 
We will consider that both git and Pharo are working on the target system. Please refer to the 
documentation of your system to install git.


!! A simple Git and Pharo workflow
If you are working on a Linux or a Mac system, a first way to explore git and Pharo is the following:

Create a git repository somewhere, in a folder.

[[[
$ mkdir myProjectRepo
$ cd myProjectRepo
$ git init
]]]

In Pharo, install GitFileTree using the following script.

[[[
Gofer new
	url: 'http://smalltalkhub.com/mc/Pharo/MetaRepoForPharo30/main';
	configurationOf: 'GitFileTree';
	loadStable
]]]

Open Monticello. In the Monticello browser, add a repository of type ==gitfiletree://== using the button ==+Repository==. 
In the file dialog which open there, choose your folder above (myProjectRepo). You're done! 
You can now save your packages into that repository.

We will then play with packages in that repository. First, create a package named ==MyPackage== using the button ==\+Package==. 
Save it into your gitfiletree repository by selecting the gitfiletree repository added above (don't forget to set the view on packages to ==All==). Then select your gitfiletree reppsitory 
and open the repository browser with " (Figure *myProjectRepo*) to see it listed. Go back to the command line and run git log.

+Repository browser on myProjectRepo>file://figures/myProjectRepo.png|width=80|label=myProjectRepo+

[[[
$ git log
commit ad7033ff06952271993a0c08108e8f0ed55b4cf7
Author: Author Name <author@example.com>
Date:   Thu May 1 10:11:29 2014 +0200

    My first package

commit fdc27b15451558dff60f21baea20560d7398ebfd
Author: Author Name <author@example.com>
Date:   Thu May 1 10:09:13 2014 +0200

    gitfiletree repository properties
]]]

You'll see that, in the git log, you see the package save you have done earlier in Pharo, complete with the log message as the package save message. The previous commit in the log is gitfiletree creating a few default files.

Now, let's see the status of the repository:

[[[
$ git status
# On branch master
nothing to commit, working directory clean
]]]

You can see that everything has been properly committed. And you recognise the "master" branch, which is visible in the repository inspector title.

Your git workflow is ready! You can explore by saving more versions of your package and see how the repository keeps logging 
the relevant commits and show you the full history in the Repository browser. 

!! Working with a remote repository
Now, the interest of git is that it is a distributed 
version control system, in which you can cooperate with others and store your code in a remote repository. 
Remote repositories may be set up via internet centralised services (such as *github>http://github.com* and *bitbucket>http://bitbucket.com*) 
or via your organisation internal servers running software such as gitosis.

So, how to work out of a remote repository? Let's take as an example *github>http://github.com*. 
First you need an account on github, and you need to register your ssh key (this is the process which avoids that you type your username and password everytime you do a git command with the remote repository. Github has the documentation for you __*here>https://help.github.com/articles/generating-ssh-keys*__, so just follow that step).

Then choose one of your projects, create a new one, or fork an existing project. For example, fork the ==GitAndPharoTutorial== project 
on Github, from the github web interface. To access it from Pharo, open the Monticello Browser, 
add a repository of type Remote git repository, and fill the template:

[[[
MCFileTreeGitRemoteRepository
	location: 'git@github.com:YourNameOnGithub/GitAndPharoTutorial'
	name: 'GitAndPharoTutorial'
	subdirectory: ''
	branch: ''
]]]

Press Ok. After a short delay, you will see opening a repository inspector on ==master@Remote git repository ... GitAndPharoTutorial==. 
You're set: you can save packages in this repository, and, to send the changes back to the remote repository, just select ==Push==. 
If you want to update from the remote repository, press ==Pull== and it will pull the remote changes and merge them with yours.

You can now explore all the versions available in the repository. To change to another branch, you need to go back to the 
command line, go inside the directory where your Pharo image is running from, and find there the GitAndPharoTutorial/ subdirectory. 
Inside, you can list all branches and select one, here the branch issue_1:

[[[
$ git branch -a
* master
  remotes/origin/HEAD -> origin/master
  remotes/origin/attributes_binary
  remotes/origin/attributes_mergeDriver
  remotes/origin/issue_1
  remotes/origin/master
$ git checkout -b issue_1 origin/issue_1
Branch issue_1 set up to track remote branch issue_1 from origin.
Switched to a new branch 'issue_1'
]]]

Go back to Pharo and press refresh to see the repository inspector updates itself.

Note that, with git, the first checkout was done carefully so that we would create a local branch called "issue_1", 
and set that branch so that it would match the remote branch (defined on the github server) called origin/issue_1. 
Once the branch has been created (by default, master is setup in this way), to change to it we just need to use git checkout:

[[[
$ git checkout master
Switched to branch 'master'
Your branch is up-to-date with 'origin/master'.
$ git checkout issue_1
Switched to branch 'issue_1'
Your branch is up-to-date with 'origin/issue_1'.
]]]

This is just a very short introduction to git. Git has a lot of documentation and may be setup in many different ways. 
We recommand reading on-line material and books if you want to know more about Git, but we will keep explaining a bit 
more of Git as we go through this chapter.

!! Working with FileTree

FileTree is the default module for exporting Monticello packages to a standard file hierarchy and, by this operation, 
allowing a version control system to handle the files. We will now describe the process of working with FileTree and Git 
for the same workflow as above.

The first step is to clone GitAndPharoTutorial from github, expecting you to have registered in github as explained above, 
and forked in github the GitAndPharoTutorial as well. In the command line, use ==git clone== with an ssh or an https url.

[[[
$ git clone git@github.com:/YourUserName/GitAndPharoTutorial
]]]

Create a FileTree repository from Monticello. Open Monticello, add a repository of type FileTree using the button ==\+Repository== 
and select the GitAndPharoTutorial/ directory created by the git clone above. You should get the following view, 
noting that, contrary to gitfiletree above, you have no reference to the branch and no history.

--- Add a screenshot of the repository

Modify and save the package inside Pharo into the repository (adding a space to one of the methods and 
saving it should be enough modifications). Open the repository: in that window note that only the latest version of the 
package is shown and that no history is available.

Drop to git command line to study the state of the repository.

[[[
$ git status
]]]

Note that nothing has been committed. Now you have to commit by hand to save the package with git.

[[[
$ git add ...
$ git commit
]]]

Now, a few things we have to be aware: got back to Pharo, save the package two times. Then drop back to the command line inside the git repository and commit. Do a git log: you will see that out of the two version saved, only one (the last one) has been recorded. Note well the consequence: the version exist in the Monticello history, but not in the git history: temporarily, it may be recovered from your package cache and allow you to do a merge in Monticello... once not anymore in the cache, the version is definitely lost as well as probably your ability to do a merge over that version.

Second issue: go back to Pharo, remove a method from a class in the package. Save the package. Go back to the command line and commit. Reload the package from the repository: you will notice that the method is back. This is caused by the fact git does not automatically remove files, and keep them. Note the git commit -a, the git add -A, commands doing the necessary remove.

[[[
$ git commit -a 
]]]

Recover a specific version with FileTree is a bit more involved. Drop to the git command line, checkout a specific commit.

[[[
$ git checkout b988b3a
Note: checking out 'b988b3a'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at b988b3a... Added BorderedMorph
]]]

Return in Pharo, open the repository or refresh a repository window. Note that the version number for the package is:

--- Screenshot

You can study the difference between the two versions. Before doing anything however, you need to go back to the command line and reset back to the master branch otherwise your saves will be done in a detached state.

[[[
$ git checkout master
Previous HEAD position was b988b3a... Added BorderedMorph
Switched to branch 'master'
]]]

Now, to update or push new changes, you use the relevant git commands.

[[[
$ git push
$ git pull
]]]

!! Merge

--- Explain merging, using the sample repository.

Merging is a key operation in a version control system and is one of the reasons to use Git with Pharo: to have Git record merge 
operations. We will restart with a clean version of the GitAndPharoTutorial:

- With GitFileTree, add a remote git repository with the following data:

[[[
MCFileTreeGitRemoteRepository
	location: 'git@github.com:ThierryGoubier/GitAndPharoTutorial'
	name: 'GitAndPharoMerge'
	subdirectory: ''
	branch: ''
]]]

- With FileTree, clone the GitAndPharoTutorial repository in a new folder with:

[[[
$ git clone git@github.com:/ThierryGoubier/GitAndPharoTutorial GitAndPharoMerge
]]]

and add a FileTree repository on the GitAndPharoMerge folder.



!! Multi-user workflow
-- from then on these are notes.

Start with the centralised workflow. Shows that it works perfectly well when combined with an approach in Pharo which is one person, one package.

Elaborate with the branches, and more complex workflows.

!!!Git, Pharo, and the technology

!!!!FileTree

First, FileTree is an extension to Monticello. Instead of saving a package as a binary and a single text file inside a zip archive (the mcz format), FileTree saves a package as a set of (mostly) text files organized in a hierarchy, suitable for inclusion in a versionning system: cvs, svn, mercurial, git, bazaar, etc... FileTree is included in Pharo3, so nothing is necessary, apart from adding repositories of type FileTree. FileTree can be added to Pharo 2.0 and Pharo 1.4, as well as Squeak and Gemstone, which ensures a high level of compatibility.

FileTree expects you to do all the versionning by hand, and does not protect you from any mistake in doing so. It also disallow merges in Monticello in most cases, because the history of the package isn't available.

On the bright side, you have complete control over which versionning system you're using and how you handle the versionning. On the bad side, some files used by FileTree look like text files, but they do not behave as such under versionning and cause conflicts on merges: version and json metadata.

!!!!GitFileTree

GitFileTree is an adaptation of FileTree to git via command line git. GitFileTree does all one has to usually do when using FileTree over git: committing a package when it has been saved in the repository, cloning a remote repository, push and pull with the remote repository, and view the complete history of the git repository related to each package. To cope with the conflicts in FileTree metadata (see below), GitFileTree recreates this metadata out of the git commit history.

GitFileTree is entirely compatible with FileTree (it uses FileTree for saving packages), which is an important point for Metacello github:// urls and overall compatibility. It works on Pharo 2.0 and 3.0.

Both FileTree and GitFileTree are totally agnostic to repositories containing non-Pharo code and data: they concerns themselves only with Pharo packages.

GitFileTree does not work under Windows because there is difficulties to run command line commands under Windows (Pharo OSProcess plugin for Windows is missing).

!!!!Metacello github:// Urls

Metacello github:// urls allow one to distribute software 

!!!!FileSystem-Git

FileSystem-Git is a complete reimplementation of git in Pharo. It is used to save Pharo on github. It's on-disk format is different from FileTree, but not by much (enough to make it unreadable, still).

Is there a way to use it from Monticello?

!!!!LibCGit bindings

Work underway to write LibCGit bindings using NativeBoost. Once done, we would have to integrate it with the above. Of course it is usable on platforms which have NativeBoost support.

!!!!GitFileTree-MergeDriver

Underway, need to explain and package that.

The GitFileTree-MergeDriver ensures that when git merges problematic FileTree metadata, it delegates the merge to a command which understand those files and execute a proper merge, as if it was done by Monticello itself.

For example, with git, merging a branch (called aBranch) to master with a simple repository composed of one package gives us the following output:

[[[
$ git merge aBranch
Auto-merging SmaCC-Tutorial.package/monticello.meta/version
CONFLICT (content): Merge conflict in SmaCC-Tutorial.package/monticello.meta/version
Auto-merging SmaCC-Tutorial.package/CalculatorParser.class/methodProperties.json
CONFLICT (content): Merge conflict in SmaCC-Tutorial.package/CalculatorParser.class/methodProperties.json
Auto-merging SmaCC-Tutorial.package/ASTFunctionNode.class/methodProperties.json
CONFLICT (add/add): Merge conflict in SmaCC-Tutorial.package/ASTFunctionNode.class/methodProperties.json
Auto-merging SmaCC-Tutorial.package/ASTFunctionNode.class/instance/compositeTokenVariables.st
CONFLICT (add/add): Merge conflict in SmaCC-Tutorial.package/ASTFunctionNode.class/instance/compositeTokenVariables.st
Auto-merging SmaCC-Tutorial.package/ASTExpressionNode.class/methodProperties.json
CONFLICT (content): Merge conflict in SmaCC-Tutorial.package/ASTExpressionNode.class/methodProperties.json
Automatic merge failed; fix conflicts and then commit the result.
]]]

This generates 5 conflicts, out of which 4 relates to FileTree metadata: one version file and three methodProperties.json.

Now, with the GitFileTree-MergeDriver, the same merge gives the following output:

[[[
$ git merge aBranch
Auto-merging SmaCC-Tutorial.package/monticello.meta/version
Auto-merging SmaCC-Tutorial.package/CalculatorParser.class/methodProperties.json
Auto-merging SmaCC-Tutorial.package/ASTFunctionNode.class/methodProperties.json
Auto-merging SmaCC-Tutorial.package/ASTFunctionNode.class/instance/compositeTokenVariables.st
CONFLICT (add/add): Merge conflict in SmaCC-Tutorial.package/ASTFunctionNode.class/instance/compositeTokenVariables.st
Auto-merging SmaCC-Tutorial.package/ASTExpressionNode.class/methodProperties.json
Automatic merge failed; fix conflicts and then commit the result.
]]]

We now have one conflict left, a .st file, which can be resolved the usual way by git. For example, a solution is to run git merge-tool to solve the conflict (that is commit a correct compositeTokenVariables.st).

!!Git MergeTool

The final step in Git and Pharo integration will be to have a Git merge tool implemented in Pharo. Such a tool already exist for the tode project.

