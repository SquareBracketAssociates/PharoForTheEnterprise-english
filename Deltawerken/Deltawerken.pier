!Deltawerken: An Application Level Web Framework

Deltawerken is a Seaside application level framework, allowing fast application development 
for medium-sized applications. An earlier extended version of it was used to build a system 
with about 150 domain classes. Complexity was deliberately and systematically pushed from 
the application to the framework. It uses a declarative way to describe domain classes somewhat 
similar to Magritte or Mold. It uses Announcements, jQuery and jQueryUI. It works on Pharo,
Squeak and Gemstone. Deltawerken was developed by Diego Lont and Stephan Eggermont.

!! Getting Started

The following expression loads both the core and some examples of Deltawerken in a 
Pharo (1.4 or 2.0) image where Seaside 3.0 or 3.1 is loaded.


[[[
Gofer new
  repository: 'http://ss3.gemstone.com/ss/Deltawerken';
  package: 'ConfigurationOfDeltawerken';
  load.

((Smalltalk at: #ConfigurationOfDeltawerken) project bleedingEdge) load.
]]]

A larger example application is Storyboard which you can load using the 
following expression.

[[[
Gofer new
    url: 'http://ss3.gemstone.com/ss/StoryBoard';
    package: 'ConfigurationOfStoryBoard';
    load.
(Smalltalk at: #ConfigurationOfStoryBoard) project bleedingEdge load]]]

In the following sections, we will develop a complete sample application.

!!A Simple Forum

!!Storyboard

Storyboard is a multi-user agile planning board with drag and drop support.  It shows how little 
code is needed to build a complete application with Deltawerken.  It consists of 39 classes, 
of which 7 are announcements (very simple). It allows you to quickly enter stories, estimate and prioritize them. 
In addition to stories you can add issue, documentation and chore cards. The cards are colored based 
on their story state. More details can be entered/viewed by expanding the card. In the expanded view 
a change history is shown. Other users of Storyboard can be invited to participate. 
 
Core domain classes are: 
User, Project, Iteration, Story, Member 

Some stories: 
- A user can have projects (s)he participates in. 
- A user can have invitations for other projects 
- A user can create projects 
- By creating a project or by accepting an invitation, a user becomes a member of the project 
- A member can invite other users to participate in a project. 
- A member can search for other users to invite. 
- Each member can have its own view on the project, the projectsettings 
- Each member can add a story to the project 
- A project has 4 projectviews, for done, current, backlog & icebox 
- By default, the projectsettings show the 4 projectViews 
- Adding a story is done by entering its storyName 
- A new story is added to the icebox 
- A story can be started after it has been estimated 
- A story can be dragged from the icebox to current or the backlog 
- A story that is done can no longer be prioritized 
- A story that is accepted can no longer be changed 
- A story can have a description 
- A story can be a bug, chore or documentation 
- Only (feature) stories are estimated 

!!Deltawerken Features 

!!!User management 
Field descriptions with validation for domain classes (somewhat similar to Magritte descriptions). 
Builders for forms and reports. 
Search support. 
... 

!!Deltawerken Components 

DEField and its descendants are used to describe domain classes. 

DEComponent is the base WAComponent equivalent. It knows the current user (if any) and announcer. 

DEPageChoice is a DEComponent that switches what it shows based on announcements. 
There are a number of addPage: variants   

DEEditComponent  allows the editing of a single domain object. It can edit new or existing ones, using 
a copy of the original to allow reverting changes. It can generate a div or table based layout. It can have a 
header and/or a footer, and an infoText between the header and the form. For required fields, 
it can show a star. Focus can be set on a specific field. 

DEEditForm extends DEEditComponent with action buttons for save and cancel. 
... 

!!Getting started 

StoryBoard provides a good overview of the power of Deltawerken. If you start it the first time, 
it shows a welcome screen, showing the number of users and projects. Please make sure 
you change the password of the administrator. In a workspace: 

(SBUser userWithId: 'Admin') password: '<your new password>' 

+Welcome screen>file://figures/PastedGraphic-1.png+


The application uses SBMain, a WAComponent, as its entrypoint. It has two children,  an SBLoginForm and a DEPageChoice initially showing SBPublicHome. 


Then register yourself as a new user: 

+Register>file://figures/PastedGraphic-2.png+


StoryState and StateTransition provide a state machine for the stories, allowing them to 
move from #initial (unestimated) through #started to #finished, #delivered and 
#accepted or #rejected leading again to #started.   

When you are logged in, you arrive at the overview of your projects 

+Projects overview>file://figures/PastedGraphic-3.png+

You can create a new project, respond to an invitation to participate in a project, 
view a storyboard of a project or view a team page of a project 

+Team>file://figures/PastedGraphic-5.png|width=50|label=figTeam+

The team page shows the current members and allows you to search for users to invite. 

The storyboard of a project shows the four panes for done, current, backlog and icebox. 

+Current pane>file://figures/PastedGraphic-6.png\width=50|label=figCurrent+

Iterations are shown in grey. By delivering an iteration, the accepted stories 
are moved to done. and a new iteration is started. A story can be expanded to show 
more details. 

+Expanded view>file://figures/PastedGraphic-7.png|width=50|label=figExpandedView+
n another application (commercial, so no code example) we have made a Field that dependent on the value, showed one or more other fields. I will try to add this "ConditionalFieldList"  to the framework this week. I have to check if this still works.

Hi All,

It took a bit more time than expected, but finally I got around to adding this Field to Deltawerken with an example. I used Parasol to add some tests, but I guess these should be more extensive.

I have now added a project called "DeltaWeb" to the Deltawerken repository, that demo's the functionality of this field. Some remarks to understand this field a bit better.

In order to have a choice field that "auto" updates itself and generates a list of fields that depends on the state we have modified the following things:
- In order to specify what fields need to be rendered we have an interface that allows us to add a value, with a list of fields that should be rendered when that value is selected. This is the method DEConditionalField addFieldList: aList for: aKey. It takes an array of fields and a key of the select value. Since it is a subclass of a select field, one can also set the labels.
- in DEFieldComponent the actual rendering of the fields takes place. Here we check if a field is a "composite" field. If a field is composite, we render an extra id, so we can render the rows as a whole. Note: this only works for a div view. For a table view one needs to update more (the entire table). This is not implemented.
- The conditional field should create a correct updater when asked for a compositeId. This does not need to be the updater id. It is the id of the div around the composite Fields. This is why it only functions with divs: with a table, I do not have a surrounding element. Also note that when you modify the id, you should also set the updateBlock of the updater.
- Finally there is a problem in the demo with updates of the string / memo field. In deltawerken we use the onChange for updates, and the onChange is fired when you exit this field. It is not fired when you press with your mouse on the radio button (well it is, but after the radio button, and since the field is no longer there). So maybe I need some fix here (I probably should serialize more) ... but I believe this field demonstrates how you can modify the updater to update a bigger part.

!!Class categories 

When building a Deltawerken application called AppName, create the following 
class categories: 
i
[[[
AppName-Model 
AppName-Model-Tests 
AppName-Web 
AppName-Announcements 
]]]

Put the domain classes in AppName-Model 
Drive the development of the domain classes from tests in AppName-Model-Tests 
Put the Seaside related code in AppName-Web 
The Announcements for navigating the site go in AppName-Announcements 

Once either of those categories gets too large (when you need to scroll the list 
of classes in the category), create a fitting new category and distribute the classes. 
Now Beach-Parasol allows web testing with Selenium Webdriver, you probably 
also want to create AppName-Web-Tests (http://ss3.gemstone.com/ss/Parasol.html) 

!!!Accessing the model 

To access the model from the web, you either give (at least) one of the domain classes 
a class (instance) var or add a separate model class. 

In Storyboard, SBUser has a class instance variable users. The class method users 
returns these users, and when nil creates a collection of users with a default administrator. 
During development, the class method resetUsers allows cleaning up. 

The alternative would be to add a class SBModel with a class variable default. 

[[[
SBModel>>default 
        ^default ifNil: [default := self new] 

SBModel>>reset 
  default := nil 
]]]

Then add accessors for the entry points 

[[[
SBModel>users 
        users ifNil: [users := OrderedCollection new. 
                self addDefaultUsers]. 
        ^users 
]]]

!!!Describing the model classes 

To create editing or reporting forms, describe the model classes 
and create an accessor returning an array of methodSymbols 

[[[
SBStory>>fields 
        ^#( storyNameField #descriptionField typeField sizeField stateField historyField) 
]]]

At the class side, create a xxxField method for all needed fields. 

SBStory has a storyName instance variable. The storyName is 
a required string. 

[[[
SBStory>>storyNameField 
        ^DEStringField new 
                label: 'Name'; 
                accessor: #( #storyName ); 
                validator: (DEStringValidator new 
                        required: true; 
                        errorMessage: 'Name is required' 
                        yourself); 
                yourself   
]]]

SBMember has a user instance variable. In a report, its email is needed 

[[[
SBMember>>emailField 
        ^SBUser emailField 
                addToAccessor: #( #user ); 
                beReadonly; 
                yourself 
]]]

!!!Creating the application 

Add a subclass of WAFileLibrary to AppName-Web. Put the css in mainCss, 

[[[
SBFileLibrary>selectorsToInclude 
        ^#( mainCss ) 
]]]

Create a application entrypoint. In StoryBoard this is SBMain, a subclass of 
WAComponent. It renders its children 

[[[
SBMain>children 
        ^Array with: self loginForm with: self mainForm 
]]]

Easiest is to create a copy, change class side description and initialize 
Don't forget to add your filelibrary. The sessionClass is often not needed. 
Change instance side title and the createLogin and createMainForm methods. 

The createMainForm creates a DEPageChoice component. It needs to interact 
with the loginForm. When the register button is pressed, the loginForm sends 
the SBRegisterUser announcement. The addPage:announcement: makes sure 
that the page is shown when receiving the announcement. Deltawerken has 
default announcements for logging on and off 

!!User management

To set up user management,  create an application specific user class. In AppName-Model, create a subclass of DEUser. See accessing the model for using users as model entrypoint.

In StoryBoard you can find the SBUser class. In order to be able to login, use a subclass of the DELoginForm. Override the "userClass" method, and the form is ready to use. It has some tags to allow you to customize the look and feel using css. In Storyboard this is used to allow you to register in addition to logging in.

!!EditForm and EditPanel

To let the user edit the model, use edit forms and edit panels. An EditForm is for editing a single object. Create an EditForm and set the "subject" to the object to edit. Note that the form needs to know whether it should create a new instance, or needs to make a (field)copy or not. The method to set a subject is "subject: aSubject isNew: aBoolean". The flag indicates if the object is new, and does not need copying or if it is an existing object and should be copied before editing.

The EditPanel is used when you need to edit multiple objects on the same page, and they either should be saved all together, or not saved at all (i.e. if validation of one of the objects fails). The interface of the EditPanel is very similar to EditForm, it has a "addSubject: aSubject isNew: aBoolean" method, that adds another EditComponent to the panel. You can also add EditComponents directly to the EditPanel.

StoryBoard only uses EditForms. The first EditForm you can find is in the SBRegisterUserForm. It is used to add new users, so the isNew flag is set to true. At this point the EditForm is a child of the SBRegisterUserForm, so the save and cancel action should be set. Alternative a EditForm can be shown modal, it returns nil on a cancel and the changed value on save.

[[[
createEditForm
	^DEEditForm new
		subject: SBUser new isNew: true;	" create a new user, and allow the edit form to change it "
		title: 'Register user';				" title is optional and is shown as a heading "
		propertySymbol: #initialEditFields;	" normally password cannot be set when editing user, only initially, so a different field set is used "
		saveAction: [ self save ];			" is called when the user presses save, and the user is valid "
		cancelAction: [ self cancel ];		" is called when the user presses cancel "
		yourself
]]]

!!Reports

To display collections reports are most useful. Reports are created by a builder. The builder has more or less the same options as a editForm. Reports should be refreshed when needed by setting the rows on rendering.

In StoryBoard the project overview makes use of a report for showing the projects. The builder is asked in the createProjectReport to create the appropriate report.

[[[
createProjectReport
	| builder |
	builder := DEReportBuilder new
		subject: SBProject;				" use the description of SBProject to build the report "
		propertySymbol: #reportColumns;	" use the field set 'report column fields' to build the report "
		yourself.
	builder addCustomColumn: self teamColumn.
	^builder createReportFrom: self accessor: #showProject:
]]]

And the render method looks like this:

[[[
renderProjectsOn: canvas
	self projectReport rows: self projects.	" we set this the rows here, to automatically update the content each time it is rendered. "
	canvas heading
		level: 2;
		with: 'Current projects'.
	canvas render: self projectReport.
]]]

!!History 

Deltawerken is a spin-off from the work we did developing a Seaside application for a start-up, 
using GLASS and Seaside 2.8. We focused on pushing out complexity from the application to 
the framework. When we started giving Seaside workshops, we wanted to provide the 
participants with an environment where they didn't need to write a lot of code to make things work. 
It was also used in our experiments to create a Naked Objects like user interface (if you were 
wondering where the noXXX method names came from). 
Last year it was upgraded from Scriptaculous to jQuery, and we developed StoryBoard. 

