!Persisting Objects with Voyage


Voyage is a small persistence framework developed by Esteban Lorenzano. It is purely object-oriented and has as a goal to present a common API to most common development usages.  It is a small layer between your objects and the persistent mechanism (such as a Mongo database).  This layer provides some useful vocabulary for your objects.


!! Getting Started

!!! Load 

To install Voyage you can go to the Configurations Browser (in the World Menu/Tools) and load ConfigurationOfVoyageMongo. Or alternatively you can execute in a workspace:

[[[
Gofer it
	url: 'http://smalltalkhub.com/mc/estebanlm/Voyage/main';
	package: 'ConfigurationOfVoyageMongo';
	load.
(Smalltalk at: #ConfigurationOfVoyageMongo) load.
]]]

This will load all that you need to persist your object model into a Mongo database.

!!! Install Mongo

TODO

!!! Create a repository

To start a new repository or connect to an existing one is simple. For example, to connect to the database ==databaseName== on the host ==mongo.db.url== execute the following code:

[[[
repository := VOMongoRepository 
	host: 'mongo.db.url' 
	database: 'databaseName'.
]]]

Alternatively you can specify the port to connect by using the message ==VOMongoRepository class>>host:port:database:==. You can keep the returned instance for storage or retrieval. A convenient alternative is to use Singleton mode. This allows to have your repository accessible from all around the image. To use Singleton mode, execute:

[[[
repository enableSingleton.
]]]

@@note Pay attention: executing this line will remove older repositories from Singleton mode!

@@note In this document, we are going to cover Voyage in Singleton mode, but using it in Instance mode should be straightforward (see the VORepository persistence protocol for more information).



!! Voyage

Voyage can work in two different modes:

- Singleton mode: There is an unique repository in your image, which works as a singleton keeping all the data. When you use this style, you can program using a "behavioral complete" approach where your instances respond to a certain vocabulary (see below for more details about vocabulary and usage).
- Instance mode: You can have an undetermined number of repositories living in your image. Of course, this mode requires you to make explicit which repositories you are going to use.



!!! Voyage API 

The following two tables show the complete API of Voyage. First we show Singleton mode:

||save || stores an object into repository (insert or update)	
||remove || removes an object from repository	
||removeAll ||removes all objects of class from repository	
||selectAll ||retrieves all objects of some kind
||selectOne: ||retrieves first object that matches the argument
||selectMany: || retrieves all objects that matches the argument

Second is Instance mode. In Instance mode, the first argument is always the repository on which to perform the operation.

|| save:|| stores an object into repository (insert or update)	
||remove: ||removes an object from repository	
||removeAll: ||removes all objects of class from repository	
|| selectAll: ||retrieves all objects of some kind
||selectOne:where: ||retrieves first object that matches the where clause	
||selectMany:where: || retrieves all objects that matches the where clause


!!! Voyage Mongo Back-End

Voyage is a common layer for different backends but currently it supports just two: an ''in memory'' layer (to fast prototype applications and to first stage developments), and a Mongo database backend.

Mongo is a document-oriented database that allows for persisting complex object models, even if it is not an object database (like Gemstone, Magma or Omnibase). Because it is not an object database but a document database, we need an Object-Document mapper (the document equivalent to an ORM). While this does not solve all the impedance mismatch issues, it fits a lot better with an object world, being able to preserve its dynamic nature.


!!Storing objects

!!!Basic storage

Let's say we want to store an Association (i.e. a pair of objects). To do this, we need to declare that the class ==Association== is storable as a root of our repository, i.e. it is an entry point to the database.  To express this we define the method ==isVoyageRoot== to return true.

[[[
Association class>>isVoyageRoot
	^true
]]]	

Then, to save an association, just send it the ==save== message:

[[[
anAssociation := #answer->42.
anAssociation save.
]]]

This will generate a collection in the database with a document of the following structure.

[[[
{ 
	"_id" : ObjectId("a05feb630000000000000000"), 
	"#instanceOf" : "Association", 
	"#version" : NumberLong("3515916499"), 
	"key" : 'answer', 
	"value" : 42
}
]]]

The collection in the database will be named ==association==, for the name of the root class.


The stored data keeps some "extra information" to allow the object to be correctly reconstructed when loading:

- ==instanceOf== records the Class of the stored instance. This is useful for reconstructing class hierarchies: the collection can also contain subclasses of the class that was declared as a Voyage root.
- ==version== keeps a marker of the version committed. This property is used for refreshing cached data in the application. If there is no ==version== field the application will always refresh the object with the data from the database (and you will lose a lot of performance).


!!!Embedding objects
Now, most objects you use are not so simple as associations, but more complex graphs with other complex object instances inside. Let's say that we want to store rectangles. Each rectangle contains two points. 

To store this, we specify that the ==Rectangle== class can be a document root:

[[[
Rectangle class>>isVoyageRoot
	^true
]]]

Now we can save rectangles as shown by this snippet:

[[[
aRectangle := 42@1 corner: 10@20.
aRectangle save.
]]]

This will generate a document like this:

[[[
{ 
	"_id" : ObjectId("ef72b5810000000000000000"), 
	"#instanceOf" : "Rectangle", 
	"#version" : NumberLong("2460645040"), 
	"origin" : { 
		"#instanceOf" : "Point", 
		"x" : 42, 
		"y" : 1 
	}, 
	"corner" : { 
		"#instanceOf" : "Point", 
		"x" : 10, 
		"y" : 20 
	}
}
]]]

As you can see, for many cases, you do not need to do anything special to store complex graphs (but you can enhance and/or modify the way you persist objects, see Section *enhancing* below).

!!!Referencing other roots
Sometimes your objects are graphs that contain other root objects. For instance, you could want to keep users and roles in different collections, and of course, an user has a collection of roles. To do this, you just need to declare the embedded objects as roots.

In our rectangle example, let's suppose we want to keep the points into a separate collection. In other words, now the points will be referenced instead of embedded.

After we add ==isVoyageRoot== to ==Point class==, we can save our rectangle.

[[[
Point class>>isVoyageRoot
	^ true
]]]

In the collection ''rectangle'', we get the following entity:
[[[
{ 
	"_id" : ObjectId("7c5e772b0000000000000000"), 
	"#instanceOf" : "Rectangle", 
	"#version" : 423858205, 
	"origin" : { 
		"#collection" : "point", 
		"#instanceOf" : "Point", 
		"__id" : ObjectId("7804c56c0000000000000000") 
	}, 
	"corner" : { 
		"#collection" : "point", 
		"#instanceOf" : "Point", 
		"__id" : ObjectId("2a731f310000000000000000") 
	} 
}
]]]

In addition to this, in the collection ''point'' we also get the two following entities:

[[[
{ 
	"_id" : ObjectId("7804c56c0000000000000000"), 
	"#version" : NumberLong("4212049275"), 
	"#instanceOf" : "Point", 
	"x" : 42, 
	"y" : 1 
}

{ 
	"_id" : ObjectId("2a731f310000000000000000"), 
	"#version" : 821387165, 
	"#instanceOf" : "Point", 
	"x" : 10, 
	"y" : 20 
}
]]]

!!! Enhancing storage
@enhancing
You can change the way your objects are stored by adding Magritte descriptions to their classes.

For instance, continuing with our rectangle example but with embedded points (not referenced points), let's imagine the following requirements:

- We want to use a different collection named ''rectanglesForTest'' instead of ''rectangle''.
- We know that we will only store instances of the ==Rectangle== class in this collection, and therefore the ==instanceOf== information is redundant.
- We know that the ''origin'' and ''corner'' attributes are always going to be points, so the ==instanceOf== information is redundant there too.

We can use specific pragmas to declare the above properties. To use them we define three class side methods: ==mongoContainer==, ==mongoOrigin== and ==mongoCorner==.

The method ==mongoContainer== is defined as follows: First it uses the ==<mongoContainer>== pragma. Second it sets the the name of the collection and the kind of entity (here Rectangle) by returning a specific ==VOMongoContainer== instance.


[[[
Rectangle class>>mongoContainer 
	<mongoContainer>
	
	^VOMongoContainer new 
		collectionName: 'rectanglesForTest';
		kind: Rectangle;
		yourself
]]]

The two other methods use the pragma ==<mongoDescription>== and set their respective attribute name and kind, as follows: 

[[[
Rectangle class>>mongoOrigin
	<mongoDescription>

	^VOMongoToOneDescription new
		attributeName: 'origin';
		kind: Point;
		yourself
]]]

[[[
Rectangle class>>mongoCorner
	<mongoDescription>

	^VOMongoToOneDescription new
		attributeName: 'corner';
		kind: Point;
		yourself
]]]

Then, you can save your rectangle and you will see that the document generated (now in the ''rectanglesForTest'' collection) will look more or less as follows:

[[[
{ 
	"_id" : ObjectId("ef72b5810000000000000000"), 
	"#version" : NumberLong("2460645040"), 
	"origin" : { 
		"x" : 42, 
		"y" : 1 
	}, 
	"corner" : { 
		"x" : 10, 
		"y" : 20 
	}
}
]]]

Other configurations are:

- Using the message ==beEager== to declare that the referenced instance is to be loaded eagerly (default is lazy).
- Using the message ==beLazy== to declare referenced instances to be loaded lazily.
- Using the message ==kindCollection:== of ==VOMongoToManyDescription== allows to change the resulting collection kind.
- Using the message ==convertNullTo:==, when retrieving an object (or a collection of objects) whose value is Null (nil), you can instead evaluate the valuable you are passing as an argument.

!! Advanced querying
Voyage relies in MongoDB query language to perform its search requests, and therefore for Pharo they have the form of dictionaries (they are in fact JSON structures, but that does not change anything for us).
 
Most of the cases, we can simplify the query expressions by using MongoQueries, a package for transformation Pharo syntax into those sometimes annoying dictionaries. 

In the following, we cover some of the main problems that we have seen while performing complex queries.

!!!Sorting and limiting object retrieval

Voyage has a group of protocols to perform search that can be more or less mapped to regular collection protocols: 

- ""==selectAll=="" Retrieves all documents in the database.

- ""==selectOne:=="" Retrieves one document. This maps to a ==detect:== method.
@@note what is the argument? show an example

- ""==selectMany:=="" Retrieves many documents. This maps to a ==select:== method.
@@note what is the argument? show an example


@@note may be put an example here for the three queries


As it is said, you can understand these methods just like their equivalents in Collection protocols. But, unlike regular collections which can operate fully on memory, often Voyage collection queries need to be customized in order to optimize memory consumption and/or accessing speed (since there can be literally millions of documents in each collection). 
To perform this task better, we provide some protocols that extend the common operations:

- ""==selectAllSortBy:=="" It retrieves all documents from a collection, sorted by the information that you provide as a dictionary. 

[[[
Customer selectAllSortBy: { #name -> VOOrder ascending } asDictionary.
]]]

@@note esteban why this is not sortedBy?


This will answer all objects in ?? which collection?? collection in ascending order by its attribute 'name'.

@@note The class ==VOOrder== provides constants to pick ==ascending== or ==descending== sort order. 

- ""==selectMany: aBlock sortBy: aDictionary=="" Retrieves a collection of objects from mongo database filtered by an expression (a block) and sorted according to a dictionary mapping. 

[[[
Customer 
	selectMany: [ :each | each orders > 10 ] 
	sortBy: { #name -> VOOrder ascending } asDictionary.
]]]

@@note Esteban you should explain when we should pass a block and when a dictionary. This is unclear. And in addition 


- ""==selectMany: aBlock limit: anInteger=="" Retrieves a collection of objects from mongo database filtered by an expression. 

The collection size is restricted to the limit provided.
 
[[[
Customer 
	selectMany: [ :each | each orders > 10 ] 
	limit: 100
]]]

This is useful when you know that you are not going to use more than a certain amount of objects, or when you know that there is a large number of persistent objects and you do not want to push the environment to its limit.

- ""==selectMany: aBlock limit: anInteger offset: anInteger=="" Retrieves a collection of objects from mongo database filtered by an expression. The collection size is restricted to the limit provided.

The first object retrieved will be at the offset position plus one.

[[[
Customer 
	selectMany: [ :each | each orders > 10 ] 
	limit: 100
	offset: 100
]]]

This is especially useful when paginating objects. 

- ""==selectMany:sortBy:limit:offset:=="" Retrieves a collection of objects from mongo database filtered by an expression. The collection size is restricted to the limit provided. The first object retrieved will be at the offset position plus one.

The resulting collection will be sorted by the expression provided. In the example below the expression states that the result is sorted in increasing value of the name field.

[[[
Customer 
	selectMany: [ :each | each orders > 10 ]
	sortBy: { #name -> VOOrder ascending } asDictionary
	limit: 100
	offset: 100
]]]



!!! Using MongoQueries 
The easiest (and recommended when possible) way to query MongoDB database is by using the package MongoQueries. MongoQueries is not part of Voyage but an optional part of the  MongoTalk layer. 
MongoTalk provides all the low-level operations for accessing MongoDB. MongoQueries transforms, within certain restrictions, regular Pharo blocks into JSON queries in the form expected by the database. 

In essence, MongoQueries is a Domain Specific Language to create MongoDB queries. A mongo query looks like a regular Pharo expression, but is much more restricted than what you can actually do with plain Smalltalk.

Here is a list of the operators that are available in MongoQueries:

|Operand|Usage|
|<, <=, >, >=, =, ~=|Regular comparison operators, they work as usual|
|&|AND operator|
|{{{|}}}|OR operator|
|not|NOT operator|
|at:|Direct access to a field.|
|where:|Allows the execution of a $where mongo statement|
 
!!!!Using ==at:== message to access embedded documents
Since MongoDB stores documents of any complexity, it is very common that one document is composed by several embedded documents, something like this: 

[[[
{ 
	"origin" : { 
		"x" : 42, 
		"y" : 1 
	}, 
	"corner" : { 
		"x" : 10, 
		"y" : 20 
	}
}
]]]

In this case, if you want to select objects filtered by one of the embedded document elements, you need to use the message ""==at:=="", and the field separator """.""". 
If you want to select all the rectangles whose origin x value is equal to 42, you should write your query as follow. 

[[[
Rectangle selectMany: [ :each | (each at: 'origin.x') = 42 ]
]]]

!!!!Using ==where:== message to perform complex (in javascript) comparisons
Sometimes you need to perform queries which are outside the capabilities of MongoQueries or even the JSON MongoDB Query Language. To overcome this problem, MongoDB provides a way to write your queries directly in JavaScript, by using the ==$where== operand. 
With MongoQueries, we can use the same by sending the ==where:== message:

In the following example, we use the JavaScript expression =='this.origin.x \== 42'==.
[[[
Rectangle selectMany: [ :each | each where: 'this.origin.x == 42' ].
]]]

You can see a more accurate documentation about the use of ==$where== in *MongoDB where documentation>http://docs.mongodb.org/manual/reference/operator/where/#op._S_where*.


!!!Using JSON queries

MongoQueries is very powerful and most of the time you will not need to use anything else. Nevertheless, there are some situations that require a deeper control of what you request. 

For that, we can always create a JSON query. JSON queries are the MongDB query internal representation, and we have a really easy way of taking advantage of it. In a nutshell, a JSON structure is a dictionary with pairs formed by a string and a value who can be a primitive value, a collection or another JSON structure (another dictionary). We can create a dictionary that acts as a query for MongoDB. 

Let's see two examples expressing the same query, first using a block as offered by MongoQueries and second a JSON dictionary.

""MongoQueries version:""

[[[
[ :each | each name = 'John Doe']
]]]

""Dictionary query version:""

[[[
{ 'name' -> 'John Doe' } asDictionary
]]]

This is obviously the easiest query possible, but we can easily increase the complexity.
A dictionary pairs are composed following an AND semantics. The following example selects the elements having 'John Doe' has name and whose orders value is greater than 10. 

[[[
{ 
	'name' -> 'John Doe'.
	'orders' -> { '$gt' : 10 } asDictionary 
} asDictionary
]]]


As you can see, to construct the "greater than" statement, we added a new dictionary with the evaluation we want. As you also can see, the more complex our query, more dictionaries we will need to add.

Now to express an OR condition, we should create a dictionary whose key is =='$or'== and whose values
are the conditioned expressions. 
The following example show how to select all objects with last name is Doe and more than ten orders OR objects with last name is not Doe and has ten or less orders:

[[[
{ '$or' : 
	{
		{ 
			'name.lastName' -> 'Doe'.
			'orders' -> { '$gt': 10 } asDictionary 
		} asDictionary.
		{ 
			'name.lastName' -> { '$ne': 'Doe'} asDictionary.
			'orders' -> { '$lte': 10 } asDictionary 
		} asDictionary.
	}.
} asDictionary.
]]]

The previous example shows you the kind of complexity you can easily achieve. But we can do more. 
Imagine that you want to take all entries with last name starting with a letter "D". You then need a regexp to match your name attributes. For this you can use the Mongo expressions ==$regexp== and ==$options$== as follows: 
 
[[[
{
	'name.lastName' -> { 
		'$regexp': '^D.*'.
		'$options': 'i'.
	} asDictionary.
} asDictionary.
]]]

This illustrates clearly the power of JSON queries.  There is a lot of different queries you can construct. You can see a complete list of operators and usages in the *MongoDB operator documentation>http://docs.mongodb.org/manual/reference/operator*


!! Conclusion 

In this chapter we presented Voyage a simple but powerful layer to store documents. We focused on the Mongo back-end and show that the package MongoQueries supports many possibilities.


% Local Variables:
% eval: (flyspell-mode -1)
% End:
