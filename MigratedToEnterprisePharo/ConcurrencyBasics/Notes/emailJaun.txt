Hi Juan,


On Dec 5, 2014, at 4:56 AM, "J. Vuletich (mail lists)"
<juanlists@jvuletich.org> wrote:

Hi Folks,

The Squeak process scheduler usually preempts a process only by another one of higher priority. And when the scheduler is ready to go back at the lower priority, it will always resume the same process that was last suspended. The only way for two or more processes of the same priority to share the processor is when the running process calls #wait or #yield.

No.  According to the blue book preempting sends the preempted process
to the back if its run queue so preempting forces a yield.  Obviously
this is wrong, but that's the way it was defined.  The ObjectWorks &
VisualWorks VMs changed this to work as you describe.

When I implemented Cog I wanted to fix this but not break old code so
I made it optional.  The behavior is controlled by a flag in the
image.  You can see the flags via Smalltalk vmParameterAt: 48.  Bit 2
(value 4) is set if preempting puts the preempted process at the head
of its list, and hence does not yield.

Here's the part of the comment from vmParameterAt:

   48 various properties of the Cog VM as an integer encoding an
array of bit flags.
       Bit 0: implies the image's Process class has threadId as its
3rd inst var (zero relative)
       Bit 1: on Cog VMs asks the VM to set the flag bit in interpreted methods
       Bit 2: if set, preempting a process puts it to the head of its
run queue, not the back,
               i.e. preempting a process by a higher one will not
cause the process to yield
               to others at the same priority.


This means that using shared state from several processes at the same priority (without using any locking mechanism, such as Semaphores, Monitors or critical sections) is safe, as long as the processes do #wait or #yield only when that shared state is in a consistent state.

Right.


It looks like this ARM VM is somehow not following this convention. If this was the case, the problems Ken sees are to be expected.

Can you check the bit is set in the image?


Thanks for raising this.  It looks like the Spur images have the bit
cleared.  Ouch.  Ah, it's not a problem of the bootstrap, its at least
a problem in trunk.  The bit is not set in trunk.  I need to a) write
some tests to test the bit and b) make sure its set in the relevant
places.