! (DRAFT) Athens: A Vector Graphics Core for Pharo


In this chapter we will present Athens a new canvas framework for Pharo.
Athens is an object-oriented vector modern graphics library developed by Igor Stasenko. 
It is not just a wrapper of a C-library but is based on an object-oriented design. 
Athens offers one API composed of Surface, Canvas, Path, Shape and Transformation.
It also sets the foundation for multiple backends (Cairo, openGL).


!! Why Athens
Before presenting Athens we want to explain briefly why we need such a new frameworks. First 
the rendering quality of the old approach is slowly damaging us. There is a need for a system to render vector graphics and not pixels. Second the current implementation suffers from an old design. There are too many canvases and they are a bit bloated. 

The old Canvas (the pre-Athens canvas) has the following drawbacks:
-  it defines too many methods (methodDict size returns 88),
-  its coordinate system is fixed, and 
-  in many places, it assumes that a canvas has direct access to pixels.


The AthensCanvas solves these drawbacks and has the following properties
- it defines a limited set of well designed messages (methodDict size returns 21),
- it has a free transformation of coordinate systems, and 
- in addition there is no assumptions about output media.

The goal of Athens is to define a core abstract API for a canvas and other elements such as the medium, paints, shapes, and transformations. Then such APIs are declined for different backends. Currently Athens offers the two back-ends: Balloon and Cairo. The Ballon back-end is the old default graphics back-end. What is important is that we do not want to get back-end specificities to creep into the API and the core because we want to be able to apply Pharo graphics to new back-end fast.

+AthensFlakeDemo new openInWindow>file://figures/flake.pdf|width=80|label=flake+

!! A couple of exciting examples

Before going into the details, let us start with a first example to give you a feel of Athens. 

!!!! A recursive flake.

First fun thing first, execute ==AthensFlakeDemo new openInWindow== into a workspace and you should get the Flake demo showing you a nice recursive  and animated flake shown in Figure *flake*.
What you should pay attention is that this demo is displaying XXX segments. 

+AthensSurfaceExample newdrawFontMetrics>file://figures/FontRendering.pdf|width=60|label=font+

Note that the current Athens cairo back-end could be speed up because it still perform extra buffer copies since it reuses the current bitmap rendering Pharo infrastructure. We expect in the future to remove this extra copy.

!!!! Fonts.
Execute ==AthensSurfaceExample newdrawFontMetrics== into a workspace and you should get 
fonts displayed as Figure *font*. What is nice in this demo is that if you pay attention is it displays all the distances characterizing a font such as the ascent, descent and others. You can see that you can fully zoom in it. We can of course rotate freely them too even if the example does not implement this.

+VGTiger demo>file://figures/Tiger.pdf|width=60|label=tiger+


!!!! Animated SVG Tiger.
We cannot finish this fun example series without the Tiger demo. This demo is the first one Igor Stasenko did at ESUG 2009 about a first binding to a vector graphics library being called from Pharo. Execute ==VGTiger demo== and you should get the animation shown in Figure *tiger*.

Note that this demo is based on importing an SVG definition and displaying it. On top of Athens a first SVG importer was developed by Igor Stasenko. It does not fully support all the SVG features but it is a good basis. 





!!!! Understanding a simple shape.
Up to now you did not get the feel of the way Athens let us define the rendered shapes. This simple example presents this. Note that at the time of this writing Athens is fully working in Pharo but it is not replacing the default morphic rendering, because a new text editor is missing. Therefore Athens proposes little tools like the ==AthensSceneView== to see your drawings and be able to move them and zoom in/out them. 


+A first zoomable shape>file://figures/RenderingOne.pdf|width=50|label=renderingOne+

[[[
AthensSceneView new
   scene: [ :canvas |
		canvas setPaint: Color blue.	
		canvas drawShape: (
			can createPath: [:path |
				path 
					absolute;
					lineTo: 50@0;
					lineTo: 50@50;
					lineTo: 0@100 ])
	];
    openInWindow
]]]

Figure *renderingOne* shows the simple result we should obtain when you execute the code snippet.
In this example you see that a shape can be any segmented path. 

Now let us study a bit the snippet. It is a simple one. First we set the color of the paint using the message ==setPaint:==. Second we create a shape and draw it. To create a shape we use the message ==createPath:==. Note that a shape can be any objects that understand certain messages. 

Once Athens will be the default rendering engine in Pharo, the ==drawnOn: aCanvas== methods will just use the same logic as the block of the example. Therefore there will be no change for you. 

In essence you got a first feel of Athens. Now let us look at its key abstractions. 

!! Main Architecture Players

Before showing in details the API using examples, we will present the main architecture elements of the Athens architecture: ==Surface==, ==Canvas==, ==Shape==, ==Paint== and ==Transformation==.


!! Surface

 ==Surface== is an abstract class which represents an output media and subclasses define different backends.

@@note Think about a surface about as a sheet of paper


In addition a surface acts as a factory for creating paints, paths, canvas and other involved objects. It provides access to its canvas. Note that surfaces are always backend-specific.

- ==createRectanglePath:==
- ==createRectanglePath: aRectangle==
- ==createRadialGradient: colorRamp center: aCenter radius: aRadius==
- ==createRadialGradient: colorRamp center: aCenter radius: aRadius focalPoint: fp==
- ==createSolidColorPaint: aColor ==
- ==createStrokePaintFor: aPaint==


In general you should always think twice when you access the surface (see below in canvas session).


!! Canvas

The Athens canvas is a central object which is used to perform drawings on a surface.
A canvas is associated to a surface. Canvas implements the following drawing operations:

@@note Think about a canvas as a pen

- ==draw== fills the currently selected shape with currently selected paint. ==drawShape: anObject== is a convenience method, which sets the current shape to anObject and then fills it
with currently selected paint.

- ==draw: anObject==  draws anObject on receiver, the object should understand ==drawOnAthensCanvas: message==

- ==drawString: aString from: start to: end==
- ==drawString: aString==
- ==drawShape: anObject==
- ==setPaint:==
- ==setShape:==
- ==paintMode==

The canvas maintains current coordinate system transformations:

- ==pathTransform== to transform shapes and 
- ==paintTransform== to transform paint. 




!!! About accessing the Canvas

Athens does not allow you to instantiate a canvas directly, instead you should obtain a ready for use instance as an argument in ==drawDuring:== message sent to an Athens ==surface==:

[[[
surface drawDuring: [:canvas | .... ]
]]]

In general you do not need to create a surface. The system should and will do it for you. Therefore once Athens will be the default graphics frameworks in Pharo, the surface will be managed automatically for you:  For the ones that really want to understand note that the surface is often a resource allocated and managed by the OS, so it should be protected from session to session (when you save an image or reopen it Pharo has to check and recreate a surface because the OS may allocate a new one in between). All this management will be hidden from you.

Using canvas outside a ==drawDuring:== method is highly discouraged. Doing so may lead to unpredicted behavior/data corruption/image crash.

!! Paint
A paint is used to fill a shape. It can be composed of 

- solid color
- gradients
- stroke paints
- bitmap (form) paints

In addition you can define your own paint. 

[[[ 
give an example
]]]

!!Shapes

A shape defines an enclosing region of drawing operation. This region can be a 
rectangle or paths. 

A path delineates a contour consisting of a sequence of connected segments. Segments
are line, quadric Bezier curve, cubic Bezier curve, circular arcs, and elliptical arcs. In addition you can define your own shape.








!! Transformations
There are two kinds of transformations in Athens: paint transformation (imagine that you want to have a tiled pattern color but rotated) and path transformation (to translate, rotate your shapes).

The canvas offers two messages: ==pathTransform== and ==paintTransform==. Both comply with the ==AthensTransform== API whose main messages which are: 

- ==rotateByDegrees: angle==
- ==rotateByRadians: angle==
- ==scaleBy: factor==
- ==scaleX: xfactor Y: yfactor==
- ==translateBy: aPoint==
- ==translateX: x Y: y==
- ==loadIdentity== that makes sure that the transformation leads to identity 
- ==restoreAfter:== aBlock. This method reestablishes the transformation once aBlock is executed. 



[[[

give an example

]]]


!! PaintMode

A paint mode controls how the incoming color (source) will be transferred to surface (destination).

To set a paint mode for a canvas, send a message with corresponding mode name to the instance of the ==PaintMode==.
PaintMode instances are available via the canvas protocol ==paintMode==. 

For example, to set an 'over' paint mode, use following:
[[[
	canvas paintMode over.
]]]

If you want to restore original paint mode after performing drawing operations, which may change it, use ==restoreAfter:== message, i.e., 

[[[
	canvas paintMode restoreAfter: [
		.. perform any drawing operations here..
		].
]]]

Since different backends may support different set of paint modes, the default implementation in ==AthensPaintMode== for all mode setters is to signal an error. To query a set of available paint modes, supported by backend, use ==availableModes== message.



!! Journey in drawing


!!! Ellispsis

[[[
AthensSceneView new
scene: [ :can |
		| path |
		path := can
				createPath: [ :builder | 
					builder
						absolute;
						moveTo: 0 @ 0.5;
						ccwArcTo: 0.5 @ 0.0 angle: 90 degreesToRadians;
						ccwArcTo: 0.0 @ -0.5 angle: 90 degreesToRadians;
						ccwArcTo: -0.5 @ 0.0 angle: 90 degreesToRadians;
						ccwArcTo: 0 @ 0.5 angle: 90 degreesToRadians ].
					
		can pathTransform
			restoreAfter: [ 
			can pathTransform scaleBy: 200 .
			can 
				setPaint: Color red ;
				drawShape:  path.
			can drawShape:  path ]			
		] ;
openInWindow
]]]


[[[
AthensSceneView new
scene: [ :can |
		| path |
		path := can
				createPath: [ :builder | 
					builder
						absolute;
						moveTo: 0 @ 0.5;
						ccwArcTo: 0.5 @ 0.0 angle: 90 degreesToRadians;
						ccwArcTo: 0.0 @ -0.5 angle: 90 degreesToRadians;
						ccwArcTo: -0.5 @ 0.0 angle: 90 degreesToRadians;
						ccwArcTo: 0 @ 0.5 angle: 90 degreesToRadians ].
					
		can pathTransform
			restoreAfter: [ 
			can pathTransform scaleBy: 200 .
			can 
				setPaint: Color red ;
				drawShape:  path.
 			"(athensCanvas setStrokePaint: strokePaint) 
				width: (self strokeWidth / self scale) asFloat."
			can drawShape:  path.].
		can pathTransform
			restoreAfter: [ 
			can pathTransform scaleBy: 190 .
			can 
				setPaint: Color blue ;
				drawShape:  path.
 			"(athensCanvas setStrokePaint: strokePaint) 
				width: (self strokeWidth / self scale) asFloat."
			can drawShape:  path 
			
			]			
		] ;
openInWindow
]]]



!!! Reusing shapes


!!! Fun with Paint transformations







!!! Displaying forms

Usually to display a form in Cairo you can use the ==Canvas>>fromForm:== but it is slow since it copies contents (form's bits) into new cairo surface. Therefore the trick is to cache the form in the paint. Therefore instead of writing 

[[[
athensCanvas pathTransform restoreAfter: [
             athensCanvas setPaint: aForm.
		 	athensCanvas setShape: aRect.
             athensCanvas draw ]
]]]

use the following


[[[
  athensCanvas pathTransform restoreAfter: [
	paint := ( canvas cacheAt: aForm
	 			 ifAbsentPut: [ (aForm asAthensPaintOn: canvas) ]).
	athensCanvas setPaint: paint.
	athensCanvas setShape: aRect.
       athensCanvas draw ]
]]]



!! Tools

As we saw the AthensSceneView let you see rendered shapes.

[[[
AthensSceneView new
   scene: [ :canvas | 
   ....];
   openInView
]]]



Now if you want to use Athens to design new Morph what should you do especially since you may be worried that you will have to redo everything once we will shift to Athens. 
Athens offers a wrapper that let you define your draw methods using the Athens API and the wrapper integrates smoothly with Morphic default rendering. This approach is nice since to switch to full Athens you will just have to remove the wrapper and your morph will full work. 



==AthensWrapMorph==

Here we should give an example.










!! Tutorial 

There is also a tutorial 





% Local Variables:
% eval: (flyspell-mode -1)
% End:
