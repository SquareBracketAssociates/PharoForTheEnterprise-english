! Seamless: A Reflective Middleware for Pharo (DRAFT) 

Seamless {{{latex:\footnote{\url{http://ss3.gemstone.com/ss/Seamless.html}} }}} 
is a reflective communication middleware for Pharo
that aims to facilitate the prototyping of distributed applications.
It provides developer friendly abstractions and syntactic sugar
for an ''out-of-the-box'' Pharo to Pharo communication experience.
After prototyping your application, Seamless lets you easily 
profile and tweak communication settings such as distribution and
serialization policies for optimizing performance and avoid common
distribution caveats. This Chapter covers version 0.4 of Seamless 
for Pharo 3.0 and will be updated frequently towards version 1.0 (stable release).

''Note: Final version should present a whole prototyping-profiling-tweaking-deployment cycle for one of the examples (plus ui for logging/profiling facilities)''

!!Wait: Reflective What ?

''The first thing we do, let's kill all the lawyers'' \-\- from "Henry VI", Shakespeare

A communication middleware is a networking solution (such as a library or a framework) that aims
to hide some of the complicated networking setup (low-level details of socket management, remote method
invocation, naming etc) from the developer. A reflective communication middleware is the more dynamic 
variant of such a system whose implementation relies on run-time reflection and can thus be itself adapted and configured
at runtime {{{latex:\footnote{For more info on reflective middleware, you can read this overview by Fabio Kon et al: \url{http://www.inf.ufg.br/~fmc/papers/CACM-ReflectiveMiddleware-no-access.pdf}} }}}. 
Seamless is such a reflective middleware for Pharo and as a project can be considered a descendent of Remote Smalltalk 
{{{latex:\footnote{\url{http://www.squeaksource.com/rST.html}} }}} 
which itself was preceded by projects such as OpenCorba {{{latex:
\footnote{\url{http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.79.1783}}
}}} and Distributed Smalltalk {{{latex:
\footnote{\url{http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.22.7323}}
}}}. It was born as an engineering prerequisite for a research prototype on 
remote debugging and has since be used on and off internally by other RMoD projects at INRIA. 

From the point of view of the Pharo developer Seamless aspires to be what RMI and DCOM is for Java and the .NET platforms respectively while leveraging the reflective and dynamic nature of our environment. Seamless may be distinguished from other solutions in that:

- It targets the Pharo environment and strives to integrate with its core facilities (ie available serialization solutions like Fuel, proxy implementations like Ghost etc)
- It provides abstractions, syntactic carbohydrates (sugar) and programming facades to make the prototyping of distributed applications feel ''out-of-the-box''. In a nutshell Seamless is biased towards Rapid Application Prototyping.
- Under the hood it tries to reify every single part of the object distribution process and its policies, so as to allow profiling and fine-tuning for optimizing performance and avoiding common distribution caveats. 

!!Enough Said: Death to Sockets

<quote here>

- Installation
- Hallo Transcript !

!!Between Ping-Pong and the REST

- The ping-pong examples
- Make a diagram with transparent distribution
on one end REST on the other, explain the
controversy of transparent distribution (ref to IBM paper)
- Explain that in terms of proxyfication/serialization
everything is a subset of transparent distribution (make
analogy with Turing tarpit)
- Explain where OpenCorba, RMI are
- Explain that with Seamless you can be wherever you choose
on the spectrum, give an all serialized rest example

!!Practice Makes Perfect

- All the examples from the presentation

!!Ok, ok: Make me a Remote Tester

- A simple remote testing application with Seamless

!!Ok, ok: Make me a Distributed Game

- Noury's application with Seamless

!!What's Under the Hood

- diagram from PhD ++ Seamless implementation part

!!How It All Works ?

- explain the different cases of distributing objects

!!Open Issues: Where Do We Go From Here ?

- More Doc/Tests
- Refactoring to Patterns (TM)
- Green Threading and UI
- Exception Handling
- Distributed-GC
- Futures
- Monitoring

!!Acks






